<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) 2011 ESRI

    All rights reserved under the copyright laws of the United States
    and applicable international laws, treaties, and conventions.

    You may freely redistribute and use this sample code, with or
    without modification, provided you include the original copyright
    notice and use restrictions.

    See use restrictions in use_restrictions.txt.
-->
<!---
    在默认skin底部增加了按钮
    <p><b>Since:</b> ArcGIS API for Flex 2.3</p>
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:esri="http://www.esri.com/2008/ags"
             xmlns:supportClasses="com.esri.ags.skins.supportClasses.*"
			 xmlns:mx="library://ns.adobe.com/flex/mx"
             width="320"
             maxHeight="300"
             preinitialize="skin_preinitializeHandler(event)" >

    <fx:Metadata>
        /**
        * A strongly typed property that references the component to which this skin is applied.
        */
        [HostComponent("com.esri.ags.portal.PopUpRenderer")]
    </fx:Metadata>

    <fx:Script>
        <![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Multipoint;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.layers.supportClasses.LayerDetails;
			import com.esri.ags.portal.PopUpRenderer;
			import com.esri.ags.portal.supportClasses.PopUpFieldInfo;
			import com.esri.ags.skins.supportClasses.AttachmentMouseEvent;
			import com.esri.ags.utils.StringUtil;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.components.PopUpInfoWithButtons;
			
			import mx.containers.utilityClasses.ConstraintRow;
			import mx.events.FlexEvent;
			
			import spark.components.Label;
			
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.Configuration;
			import flashx.textLayout.elements.LinkElement;
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.events.FlowElementMouseEvent;
			import flashx.textLayout.formats.TextDecoration;
			import flashx.textLayout.formats.TextLayoutFormat;
			import flashx.textLayout.formats.WhiteSpaceCollapse;
			
			
			
			

            private var textLayoutConfiguration:Configuration;

            /* Define the symbol fill items that should be colored by the "symbolColor" style.*/
            private static const symbols:Array = [ "titleLineSymbol" ];

            /**
             * @private
             */
            override public function get symbolItems():Array
            {
                return symbols;
            }

            private function skin_preinitializeHandler(event:FlexEvent):void
            {
                // set the link styles
                textLayoutConfiguration = new Configuration();
                var textLayoutFormat:TextLayoutFormat = new TextLayoutFormat();
                textLayoutFormat.color = getStyle("linkActiveColor")
                textLayoutFormat.textDecoration = TextDecoration.UNDERLINE;
                textLayoutConfiguration.defaultLinkActiveFormat = textLayoutFormat;
                textLayoutFormat = new TextLayoutFormat();
                textLayoutFormat.color = getStyle("linkHoverColor")
                textLayoutFormat.textDecoration = TextDecoration.UNDERLINE;
                textLayoutConfiguration.defaultLinkHoverFormat = textLayoutFormat;
                textLayoutFormat = new TextLayoutFormat();
                textLayoutFormat.color = getStyle("linkNormalColor")
                textLayoutFormat.textDecoration = TextDecoration.UNDERLINE;
                textLayoutConfiguration.defaultLinkNormalFormat = textLayoutFormat;

                // preserve white space
                textLayoutFormat = new TextLayoutFormat();
                textLayoutFormat.whiteSpaceCollapse = WhiteSpaceCollapse.PRESERVE;
                textLayoutConfiguration.textFlowInitialFormat = textLayoutFormat;

                attachmentInspector.addEventListener(AttachmentMouseEvent.ATTACHMENT_CLICK, attachmentInspector_attachmentClickHandler);
            }

            private function attachmentInspector_attachmentClickHandler(event:AttachmentMouseEvent):void
            {
                navigateToURL(new URLRequest(event.attachmentInfo.url));
            }
			
            /**
             * @private
             */
			private var buttonArray:Array;
			
            override protected function commitProperties():void
            {
                super.commitProperties();

                var featureLayer:FeatureLayer = hostComponent.featureLayer;
                var formattedAttributes:Object = hostComponent.formattedAttributes;
                var graphic:Graphic = hostComponent.graphic;
                var map:Map = hostComponent.map;
                var popUpInfo:PopUpInfoWithButtons = hostComponent.popUpInfo as PopUpInfoWithButtons;
                var validMediaInfos:Array = hostComponent.validPopUpMediaInfos;
                var geometry:Geometry = graphic ? graphic.geometry : null;
                var layerDetails:LayerDetails = featureLayer ? featureLayer.layerDetails : null;
				
				header.removeAllElements();
				vGroup.removeAllElements();
				footer.removeAllElements();

                if (popUpInfo)
                {
                    if (popUpInfo.title)
                    {
                        titleText.text = StringUtil.substitute(popUpInfo.title, formattedAttributes);
                        if (titleText.text)
                        {
                            header.addElement(titleText);
                            header.includeInLayout = header.visible = true;
							headerLine.includeInLayout = headerLine.visible = true;
                        }
                        else
                        {
                            header.includeInLayout = header.visible = false;
							headerLine.includeInLayout = headerLine.visible = false;
                        }
                    }
					/*else
					{
						var title:String = formattedAttributes.title;
						if ( title && title != "" )
						{
							titleText.text = title;
							header.addElement(titleText);
							header.includeInLayout = header.visible = true;
							headerLine.includeInLayout = headerLine.visible = true;
						}
						else
						{
							header.includeInLayout = header.visible = false;
							headerLine.includeInLayout = headerLine.visible = false;
						}
					}*/
					
                    var htmlText:String;
                    if (popUpInfo.description)
                    {
                        htmlText = StringUtil.substitute(popUpInfo.description, formattedAttributes);
                        if (htmlText)
                        {
                            setTextFlow(descriptionText, htmlText);
                            vGroup.addElement(descriptionText);
                        }
                    }
                    else if (popUpInfo.popUpFieldInfos)
                    {
                        // make sure there's enough constraint rows
                        var constraintRows:Vector.<ConstraintRow> = keyValueGroupLayout.constraintRows; // returns a clone
                        if (constraintRows.length < popUpInfo.popUpFieldInfos.length)
                        {
                            for (var i:int = constraintRows.length + 1; i <= popUpInfo.popUpFieldInfos.length; i++)
                            {
                                var constraintRow:ConstraintRow = new ConstraintRow();
                                constraintRow.initialized(this, null); // required
                                constraintRow.id = "row" + i;
                                constraintRows.push(constraintRow);
                            }
                            keyValueGroupLayout.constraintRows = constraintRows;
                        }

                        keyValueGroup.removeAllElements();
                        var rowID:int = 1;
                        for each (var fieldInfo:PopUpFieldInfo in popUpInfo.popUpFieldInfos)
                        {
                            if (fieldInfo.visible)
                            {
                                var fieldLabel:Label = new Label();
                                fieldLabel.text = ( fieldInfo.label || fieldInfo.fieldName );
								fieldLabel.setStyle( "fontWeight", "bold" );
								fieldLabel.setStyle( "textAlign", "end" );
                                fieldLabel.left = 0;
                                fieldLabel.right = "col1:0";
                                fieldLabel.top = "row" + rowID + ":" + (rowID == 1 ? 5 : 15);
                                keyValueGroup.addElement(fieldLabel);

                                var fieldValue:RichEditableText;
                                htmlText = formattedAttributes[fieldInfo.fieldName];
                                if (htmlText)
                                {
                                    fieldValue = new RichEditableText();
                                    // convert attribute field values that just contain URLs into links
                                    var match:Array = htmlText.match(/^\s*((https?|ftp):\/\/\S+)\s*$/i);
                                    if (match && match.length > 0)
                                    {
                                        htmlText = '<a href="' + match[1] + '" target="_blank">' + match[1] + "</a>";
                                    }
                                    setTextFlow(fieldValue, htmlText);
                                    fieldValue.editable = false;
                                    fieldValue.left = "col2:5";
                                    fieldValue.right = 0;
                                    fieldValue.top = fieldLabel.top;
                                    keyValueGroup.addElement(fieldValue);
                                }
                                rowID++;
                            }
                        }
                        if (keyValueGroup.numElements > 0)
                        {
                            fieldLabel.bottom = "row" + --rowID + ":5"; // add a little bottom padding to last label
                            vGroup.addElement(keyValueGroup);
                        }
                    }
					
                    if (validMediaInfos && validMediaInfos.length > 0)
                    {
                        vGroup.addElement(mediaBrowser);
                        mediaBrowser.attributes = graphic.attributes;
                        mediaBrowser.formattedAttributes = formattedAttributes;
                        mediaBrowser.popUpFieldInfos = popUpInfo.popUpFieldInfos;
                        mediaBrowser.popUpMediaInfos = validMediaInfos;
                    }

                    if (popUpInfo.showAttachments && graphic && featureLayer
                        && layerDetails && layerDetails.hasAttachments && layerDetails.objectIdField)
                    {
                        vGroup.addElement(attachmentInspector);
                        attachmentInspector.showAttachments(graphic, featureLayer);
                    }

                    if (popUpInfo.showZoomToButton && map && geometry)
                    {
                        footer.addElement(zoomToButton);
                    }
					
                    if (popUpInfo.showRelatedRecords && graphic && featureLayer
                        && layerDetails && layerDetails.relationships && layerDetails.relationships.length)
                    {
                        footer.addElement(showRelatedRecords);
                        relationshipInspector.graphic = graphic;

                        if (showRelatedRecords.selected) // show related records
                        {
                            showRelatedRecords.label = resourceManager.getString('ESRIMessages', 'hideRelatedRecordsLabel');
                            relationshipInspector.includeInLayout = relationshipInspector.visible = true;
                        }
                    }
					
					
					buttonArray = popUpInfo.buttonArray;
					if ( buttonArray && buttonArray.length > 0 )
					{
						footerLine.includeInLayout = footerLine.visible = true;
						for each ( var buttonObj:Object in buttonArray )
						{
							var label:String = buttonObj.label;
							var action:String = buttonObj.action;
							var idField:String = buttonObj.idField || "";
							var id:String = "";
							if ( idField != "" )
							{
								for each (fieldInfo in popUpInfo.popUpFieldInfos)
								{
									if ( idField == fieldInfo.fieldName )
									{
										id = formattedAttributes[fieldInfo.fieldName];
										break;
									}
								}
							}
							else
							{
								id = graphic.id;
							}
							
							var button:Button = new Button();
							button.minWidth = 50;
							button.label = label;
							button.id = id;
//							button.setStyle( "skinClass", Class( btSkin ) );
							switch( action.toLowerCase() )
							{
								//显示设备详细信息，调用js函数
								case "opendevice":
									button.addEventListener( MouseEvent.CLICK, openDevice_clickHandler );
									break;
								
								//显示设备详细信息，调用js函数
								//普陀项目openDevice调用不到，加了一个showDevice
								case "showdevice":
									button.addEventListener( MouseEvent.CLICK, showDevice_clickHanlder );
									break;
								
								//移动graphic
								case "movegraphic":
									button.addEventListener( MouseEvent.CLICK, moveGraphic_clickHandler );
									break;
								
								//删除graphic
								case "deletegraphic":
									button.addEventListener( MouseEvent.CLICK, deleteGraphic_clickHandler );
									break;
							}
							footer.addElement( button );
						}
					}
					else
					{
						footerLine.includeInLayout = footerLine.visible = false;
					}
                }
				else
				{
					
					
					
				}
				
				
            }

            private function setTextFlow(textComp:RichEditableText, htmlText:String):void
            {
                if (textComp && htmlText != null)
                {
                    var textFlow:TextFlow = TextConverter.importToFlow(htmlText, TextConverter.TEXT_FIELD_HTML_FORMAT, textLayoutConfiguration);
                    if (textFlow)
                    {
                        textFlow.addEventListener(FlowElementMouseEvent.CLICK, textFlow_linkClickHandler, false, 0, true);
                        textComp.textFlow = textFlow;
                    }
                }
            }

            private function textFlow_linkClickHandler(event:FlowElementMouseEvent):void
            {
                var linkElement:LinkElement = event.flowElement as LinkElement;
                if (linkElement && linkElement.target != "_blank")
                {
                    linkElement.target = "_blank"; // make sure target is "_blank"
                }
            }

            private function zoomToButton_clickHandler(event:MouseEvent):void
            {
                var graphic:Graphic = hostComponent.graphic;
                var map:Map = hostComponent.map;
                var geometry:Geometry = graphic.geometry;

                var extent:Extent = geometry.extent; // returns null for MapPoint or Multipoint's with only one point
                if (extent)
                {
                    map.zoomTo(geometry);
                }
                else
                {
                    var mapPoint:MapPoint;
                    if (geometry is MapPoint)
                    {
                        mapPoint = geometry as MapPoint;
                    }
                    else if (geometry is Multipoint)
                    {
                        var multipoint:Multipoint = geometry as Multipoint;
                        if (multipoint.points && multipoint.points.length > 0)
                        {
                            mapPoint = multipoint.points[0];
                        }
                    }
                    if (mapPoint)
                    {
                        // make sure the infoWindow always points to the current (selected) feature
                        map.infoWindow.show(mapPoint);
                        // Zoom to 1/16th the size of the current extent.
                        // This is the same as calling map.zoomIn() four times.
                        map.zoom(1 / 16, mapPoint);
                        if (!map.extent.contains(mapPoint))
                        {
                            map.centerAt(mapPoint);
                        }
                    }
                }
            }

            private function showRelatedRecords_changeHandler(event:Event):void
            {
                if (showRelatedRecords.selected)
                {
                    showRelatedRecords.label = resourceManager.getString('ESRIMessages', 'hideRelatedRecordsLabel');

                    hostComponent.width = hostComponent.width * 2;
                    relationshipInspector.includeInLayout = relationshipInspector.visible = true;
                }
                else
                {
                    showRelatedRecords.label = resourceManager.getString('ESRIMessages', 'showRelatedRecordsLabel');

                    hostComponent.width = hostComponent.width / 2;
                    relationshipInspector.includeInLayout = relationshipInspector.visible = false;
                }
            }
			
			private function openDevice_clickHandler( event:MouseEvent ):void
			{
				var button:Button = event.currentTarget as Button;
				var buttonLabel:String = button.label;
				
				for each ( var buttonObj:Object in buttonArray )
				{
					if ( buttonObj.label == buttonLabel )
					{
						AppEvent.dispatch( AppEvent.EXTERNAL_CALL, 
							{
								functionName: "openDevice",
								params: [ buttonObj.type, button.id ]
							} 
						);
						break;
					}
				}
			}
			
			/**
			 * 普陀项目openDevice函数调不到，showDevice就可以
			 * */
			private function showDevice_clickHanlder( event:MouseEvent ):void
			{
				var button:Button = event.currentTarget as Button;
				var buttonLabel:String = button.label;
				
				for each ( var buttonObj:Object in buttonArray )
				{
					if ( buttonObj.label == buttonLabel )
					{
						AppEvent.dispatch( AppEvent.EXTERNAL_CALL, 
							{
								functionName: "showDevice",
								params: [ buttonObj.type, button.id ]
							} 
						);
						break;
					}
				}
			}
			
			private function moveGraphic_clickHandler( event:MouseEvent ):void
			{
				var button:Button = event.currentTarget as Button;
				var buttonLabel:String = button.label;
				for each ( var buttonObj:Object in buttonArray )
				{
					if ( buttonObj.label == buttonLabel )
					{
						var type:String = buttonObj.type;
						var dataObj:Object = 
							{
								type: type,
								ids: [ button.id ]
							};
						var dataString:String = JSON.stringify( dataObj );
						trace( dataString );
						AppEvent.dispatch( AppEvent.START_MOVE_OVERLAY, dataString );
					}
				}
			}
			
			private function deleteGraphic_clickHandler( event:MouseEvent ):void
			{
				var button:Button = event.currentTarget as Button;
				var buttonLabel:String = button.label;
				for each ( var buttonObj:Object in buttonArray )
				{
					if ( buttonObj.label == buttonLabel )
					{
						var type:String = buttonObj.type;
						var dataObj:Object = 
							{
								type: type,
								ids: [ button.id ]
							};
						var dataString:String = JSON.stringify( dataObj );
						AppEvent.dispatch( AppEvent.DELETE_POINTS_BY_MAP, dataString );
					}
				}
			}
		]]>
    </fx:Script>

    <fx:Declarations>
        <!--- @private -->
        <s:RichEditableText id="titleText"
                            width="100%"
                            editable="false"
                            fontWeight="bold"
							fontSize="16"/>

        <!--- @private -->
        <s:Line id="titleLine" width="100%">
            <s:stroke>
                <!--- @private -->
                <s:SolidColorStroke id="titleLineSymbol"
                                    color="#BBBBBB"
                                    weight="1"/>
            </s:stroke>
        </s:Line>

        <!--- @private -->
        <s:RichEditableText id="descriptionText"
                            width="100%"
                            editable="false"/>

        <!--- @private -->
        <s:Group id="keyValueGroup" width="100%">
            <s:layout>
                <!--- @private -->
                <s:ConstraintLayout id="keyValueGroupLayout">
                    <s:constraintColumns>
                        <!--- @private -->
                        <s:ConstraintColumn id="col1" maxWidth="100"/>
                        <!--- @private -->
                        <s:ConstraintColumn id="col2" width="100%"/>
                    </s:constraintColumns>
                </s:ConstraintLayout>
            </s:layout>
        </s:Group>

        <!--- @private -->
        <supportClasses:PopUpMediaBrowser id="mediaBrowser"
                                          width="100%"
                                          skinClass="com.esri.ags.skins.supportClasses.PopUpMediaBrowserSkin"/>

        <!--- @private -->
        <esri:AttachmentInspector id="attachmentInspector"
                                  width="100%"
                                  addEnabled="false"
                                  deleteEnabled="false"/>
		
		<!--- @private -->
        <s:Button id="zoomToButton"
                  click="zoomToButton_clickHandler(event)"
                  fontWeight="bold"
                  label="{resourceManager.getString('ESRIMessages', 'zoomLabel')}"/>

        <!--- @private -->
        <s:ToggleButton id="showRelatedRecords"
                        change="showRelatedRecords_changeHandler(event)"
                        fontWeight="bold"
                        label="{resourceManager.getString('ESRIMessages', 'showRelatedRecordsLabel')}"/>
    </fx:Declarations>

	<s:VGroup width="100%" height="100%">
		<s:VGroup id="header"
				  width="100%"
				  includeInLayout="false"
				  paddingLeft="5"
				  paddingRight="5"
				  visible="false">
			<!-- elements are added in commitProperties() -->
		</s:VGroup>
		
		<s:Line id="headerLine" width="100%" includeInLayout="false" visible="false">
			<s:stroke>
				<s:SolidColorStroke color="{getStyle( 'selectionColor' )}"
									weight="1"/>
			</s:stroke>
		</s:Line>
		
		<s:HGroup width="100%" height="100%"
				  paddingBottom="5"
				  paddingLeft="5"
				  paddingRight="5"
				  paddingTop="5">
			<s:Scroller width="100%" height="100%">
				<!--- @private -->
				<s:VGroup id="vGroup">
					<!-- elements are added in commitProperties() -->
				</s:VGroup>
			</s:Scroller>
			<esri:RelationshipInspector id="relationshipInspector"
										width="100%" height="100%"
										includeInLayout="false"
										visible="false"/>
		</s:HGroup>
		
		<s:Line id="footerLine" width="100%" includeInLayout="false" visible="false">
			<s:stroke>
				<s:SolidColorStroke color="{getStyle( 'selectionColor' )}"
									weight="1"/>
			</s:stroke>
		</s:Line>
		
		<s:HGroup id="footer" paddingBottom="5">
			<!-- elements are added in commitProperties() -->
		</s:HGroup>
	</s:VGroup>	
	
	
</s:SparkSkin>
