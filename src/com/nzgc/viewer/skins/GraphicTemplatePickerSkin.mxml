<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		initialize="this_initializeHandler(event)">
	
	<!-- host component -->
	<fx:Metadata>
		/**
		* A strongly typed property that references the component to which this skin is applied.
		*/
		[HostComponent("com.nzgc.viewer.components.GraphicTemplatePicker")]
	</fx:Metadata>

	<s:states>
		<s:State name="normal"/>
		<s:State name="loading"/>
		<s:State name="disabled"/>
	</s:states>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center"/>
	</s:layout>

	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.layers.GraphicsLayer;
			import com.nzgc.viewer.components.GraphicTemplateEditor;
			import com.nzgc.viewer.components.supportClasses.GraphicTemplate;
			import com.nzgc.viewer.components.supportClasses.GraphicTemplateGroup;
			import com.nzgc.viewer.skins.supportClasses.GraphicTemplatePickerListItemRenderer;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.graphics.GradientEntry;
			import mx.graphics.LinearGradient;
			import mx.graphics.SolidColorStroke;
			import mx.managers.PopUpManager;
			
			import spark.components.CheckBox;
			import spark.components.Group;
			import spark.components.HGroup;
			import spark.components.Label;
			import spark.components.List;
			import spark.components.TextInput;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			import spark.layouts.TileLayout;
			import spark.primitives.Rect;

			private var _changeWatcher:ChangeWatcher;
			private var _templateCollectionChanged:Boolean;
			private var _selectedTemplateChanged:Boolean;
			private var _skinSelectedTemplate:GraphicTemplate;
			private var _currentList:List;
			
			private var _organiseModeChangeWatcher:ChangeWatcher;
			private var _organiseModeChanged:Boolean;
			
			private var _selectedTemplateChangeWatcher:ChangeWatcher;
			private var _templatePickerListItemRenderer:ClassFactory = new ClassFactory(GraphicTemplatePickerListItemRenderer);
			private var _itemRenderer:GraphicTemplatePickerListItemRenderer = new GraphicTemplatePickerListItemRenderer;
			
			[Bindable]
			[Embed(source="../../../../assets/skins/loader.swf")]
			private var loader:Class;

			private function this_initializeHandler(event:FlexEvent):void
			{
				_changeWatcher = ChangeWatcher.watch(hostComponent, "graphicTemplates", templateCollectionChangeHandler);
				_selectedTemplateChangeWatcher = ChangeWatcher.watch(hostComponent, "selectedTemplate", selectTemplateChangeHandler);
				_organiseModeChangeWatcher = ChangeWatcher.watch(hostComponent, "organiseMode", organiseModeChangeHandler);
			}
			
			public function templateCollectionChangeHandler(event:Event = null):void
			{
				invalidateProperties();
				_templateCollectionChanged = true;
			}
			
			private function selectTemplateChangeHandler(event:Event = null):void
			{
				invalidateProperties();
				_selectedTemplateChanged = true;
			}

			private function organiseModeChangeHandler(event:Event = null):void
			{
				invalidateProperties();
				_organiseModeChanged = true;
			}
			
			/**
			 * @private
			 */
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (_templateCollectionChanged || _organiseModeChanged)
				{
					_templateCollectionChanged = false;
					_organiseModeChanged = false;
					
					// First remove everything from the group
					vGrp.removeAllElements();
					
					// Create list and label for each group of graphic template
					for (var i:Number = 0; i < hostComponent.templateGroups.length; i++)
					{
						var group:GraphicTemplateGroup = hostComponent.templateGroups[i] as GraphicTemplateGroup;
						
						if (group.templates.length > 0)
						{
							var groupDisplayName:String = group.name;

							var hGrp:HGroup = new HGroup();
							hGrp.gap = 3;
							hGrp.paddingLeft = 3;
							hGrp.paddingRight = 3;
							hGrp.paddingTop = 1;
							hGrp.paddingBottom = 1;
							hGrp.verticalAlign = "middle";
							hGrp.percentWidth = 100;

							var chkVisible:CheckBox = new CheckBox();
							chkVisible.name = "chk" + groupDisplayName;
							chkVisible.selected = GraphicTemplateGroup(hostComponent.templateGroups[i]).visible;
							chkVisible.addEventListener(Event.CHANGE,chkvisible_changeHandler);

							//if(hostComponent.organiseMode)
							//{
							//	var groupInput:TextInput = new TextInput();
							//	groupInput.percentWidth = 100;
							//	groupInput.text = groupDisplayName;
							//	groupInput.name = "grp" + groupDisplayName;
							//	groupInput.editable = true;
							//	groupInput.addEventListener(Event.CHANGE,groupInput_changeHandler);

							//	hGrp.addElement(chkVisible);
							//	hGrp.addElement(groupInput);
							//}
							//else
							//{
								var groupLabel:Label = new Label();
								groupLabel.text = groupDisplayName;
								groupLabel.styleName = "WidgetTitle";							

								hGrp.addElement(chkVisible);
								hGrp.addElement(groupLabel);
							//}
							
							vGrp.addElement(hGrp);
							
							var templateList:List = new List;
							templateList.name = groupDisplayName;
							templateList.addEventListener(IndexChangeEvent.CHANGE, listChangeHandler, false, -1, true);
							templateList.dataProvider = new ArrayCollection(GraphicTemplateGroup(hostComponent.templateGroups[i]).templates);
							templateList.itemRenderer = _templatePickerListItemRenderer;
							templateList.visible = chkVisible.selected;
							
							// style and layout
							templateList.setStyle("borderVisible", false);
							const tileLayout:TileLayout = new TileLayout();
							tileLayout.verticalGap = 0;
							tileLayout.horizontalGap = 0;
							templateList.layout = tileLayout;
							
							vGrp.addElement(templateList);

						}
					}
						
					invalidateDisplayList();
					selectTemplateFromList();
				}
				
				if (_selectedTemplateChanged)
				{
					_selectedTemplateChanged = false;
					selectTemplateFromList();
				}
				
				// Update the template number label
				labTemplateNumbers.text = hostComponent.graphicTemplates.length.toString() + " 个模板已加载";
			}
			
			
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				var templatesPerList:int;
				
				var templatesPerRow:int = Math.floor(hostComponent.width / _itemRenderer.width);
				templatesPerRow = Math.floor(hostComponent.width / _itemRenderer.width) < templatesPerRow ? templatesPerRow - 1 : templatesPerRow;
				
				if (vGrp)
				{
					for (var i:Number = 0; i < vGrp.numElements; i++)
					{
						if (vGrp.getElementAt(i) is List)
						{
							List(vGrp.getElementAt(i)).percentWidth = 100;
							
							templatesPerList = List(vGrp.getElementAt(i)).dataProvider.length;
							
							if (templatesPerList <= templatesPerRow)
							{
								List(vGrp.getElementAt(i)).height = _itemRenderer.height;
							}
							else
							{
								List(vGrp.getElementAt(i)).height = Math.ceil(templatesPerList / templatesPerRow) * (_itemRenderer.height);
							}
						}
					}
					vGrp.invalidateSize();
				}
			}
			
			private function selectTemplateFromList():void
			{
				if (!hostComponent.templateGroups.length > 0)
				{
					// Do nothing -  as there is no collection.
				}
				else if (hostComponent.selectedTemplate == _skinSelectedTemplate)
				{
					// Do nothing -  as the template is already selected and is same as hostComponent.selectedTemplate.
				}
				else if (!hostComponent.selectedTemplate)
				{
					// clear selection is called
					_skinSelectedTemplate = null;
					for (var i:Number = 0; i < vGrp.numElements; i++)
					{
						if (vGrp.getElementAt(i) is List)
						{
							if (List(vGrp.getElementAt(i)).selectedIndex != -1)
							{
								List(vGrp.getElementAt(i)).selectedIndex = -1;
							}
						}
					}
				}
				else
				{
					for (var k:Number = 0; k < vGrp.numElements; k++)
					{
						if (vGrp.getElementAt(k) is List)
						{
							for (var n:Number = 0; n < List(vGrp.getElementAt(k)).dataProvider.length; n++)
							{
								if ((List(vGrp.getElementAt(k)).dataProvider.getItemAt(n).name === hostComponent.selectedTemplate.name) &&
									(List(vGrp.getElementAt(k)).dataProvider.getItemAt(n).groupname === hostComponent.selectedTemplate.groupname))
								{
									List(vGrp.getElementAt(k)).selectedIndex = n;
									_skinSelectedTemplate = hostComponent.selectedTemplate;
								}
							}
						}
					}
				}
			}
			
			private function enableDisableList(group:GraphicTemplateGroup):void
			{
				for (var i:Number = 0; i < vGrp.numElements; i++)
				{
					if (vGrp.getElementAt(i) is List && List(vGrp.getElementAt(i)).name == group.name)
					{
						const list:List = List(vGrp.getElementAt(i));
						list.visible = list.includeInLayout = group.visible;
					
						if (!group.visible && group.contains(hostComponent.selectedTemplate))
						{
							trace("Clearing Selection");
							hostComponent.clearSelection();
						}
					}
				}
			}
			
			private function listChangeHandler(event:IndexChangeEvent):void
			{
				vGrp.removeEventListener(MouseEvent.MOUSE_DOWN, vGrp_mouseDownHandler);
				callLater(addListener);
				
				if (event.newIndex != -1)
				{
					_currentList = List(event.target);
					
					_skinSelectedTemplate = List(event.target).selectedItem;
					hostComponent.selectedTemplate = _skinSelectedTemplate;
					
					for (var i:Number = 0; i < vGrp.numElements; i++)
					{
						if (vGrp.getElementAt(i) is List)
						{
							if (List(vGrp.getElementAt(i)) !== _currentList)
							{
								List(vGrp.getElementAt(i)).selectedIndex = -1;
							}
						}
					}
				}
				else
				{
					// no template selected
					if (hostComponent.selectedTemplate)
					{
						for (var j:Number = 0; j < vGrp.numElements; j++)
						{
							if (vGrp.getElementAt(j) is List)
							{
								// user deselected template on the list
								if (List(event.target) === _currentList)
								{
									_skinSelectedTemplate = null;
									hostComponent.selectedTemplate = null;
								}
							}
						}
					}
				}
			}
			
			private function addListener():void
			{
				vGrp.addEventListener(MouseEvent.MOUSE_DOWN, vGrp_mouseDownHandler);
			}
			
			private function vGrp_mouseDownHandler(event:MouseEvent):void
			{
				if (event.target is GraphicTemplatePickerListItemRenderer)
				{
					if (hostComponent.selectedTemplate && List(GraphicTemplatePickerListItemRenderer(event.target).owner).selectedItem == hostComponent.selectedTemplate) // shows a template already selected, hence clear selection
					{
						hostComponent.clearSelection();
					}
				}
				else
				{
					hostComponent.clearSelection();
				}
			}
			
			/**
			 * Called when the group visibility checkbox value changes.
			 */
			protected function chkvisible_changeHandler(event:Event):void
			{
				// loop through the groups and make them visible
				for (var i:Number = 0; i < hostComponent.templateGroups.length; )
				{
					if ("chk" + hostComponent.templateGroups[i].name == event.target.name)
					{
						hostComponent.templateGroups[i].visible = event.target.selected;
						enableDisableList(hostComponent.templateGroups[i]);
						break;
					}
					else
					{
						i++;
					}
				}
			}
			
			protected function groupInput_changeHandler(event:TextOperationEvent):void
			{
				// loop through the groups to finde the one to change the name
				for (var i:Number = 0; i < hostComponent.templateGroups.length; )
				{
					if ("grp" + hostComponent.templateGroups[i].name == event.target.name)
					{
						//hostComponent.templateGroups[i].visible = event.target.selected;
						//enableDisableList(hostComponent.templateGroups[i]);
						break;
					}
					else
					{
						i++;
					}
				}				
			}

			
			/* -------------------------------------------------------------------
			Button actions 
			---------------------------------------------------------------------- */

			/** 
			 * Called when the user clicks the organise button.
			 */ 
			protected function butChangeOrganiseState_clickHandler(event:MouseEvent):void
			{
				hostComponent.organiseMode = ! hostComponent.organiseMode;
			}

			/**
			 * Called when the user clicks the add new button.
			 */
			protected function butAddNewTemplate_clickHandler(event:MouseEvent):void
			{
				// Create a modal graphic template editor
				var dialog:GraphicTemplateEditor = GraphicTemplateEditor(PopUpManager.createPopUp(hostComponent.parentDocument.map,GraphicTemplateEditor,true));
				dialog.TemplateGroups = hostComponent.templateGroups;
				
				// Add handlers for dialog being cancelled, closed or move button pressed 
				dialog.addEventListener("graphicTemplateEditor_Save",newTemplate_SaveHandler);
				dialog.addEventListener("graphicTemplateEditor_SaveNew",newTemplate_SaveNewHandler);
				dialog.addEventListener("graphicTemplateEditor_Cancel",newTemplate_CancelHandler);
				dialog.addEventListener(CloseEvent.CLOSE,newTemplate_CloseHandler);

				// Show the move dialog				
				PopUpManager.centerPopUp(dialog);
 			}
			
			/**
			 * Called when the template editor dialog is closed
			 */
			private function newTemplate_CloseHandler(event:CloseEvent):void
			{
				var dialog:GraphicTemplateEditor = GraphicTemplateEditor(event.target);
				newTemplate_Cancel(dialog); 
			}

			/**
			 * Called when the user updates an existing template.
			 */
			private function newTemplate_SaveHandler(event:Event):void
			{
				var dialog:GraphicTemplateEditor = GraphicTemplateEditor(event.target);
				
				// Check for the existing selected template
				
				
				newTemplate_Cancel(dialog); 
			}

			/**
			 * Called when a new template is created.
			 */
			private function newTemplate_SaveNewHandler(event:Event):void
			{
				var dialog:GraphicTemplateEditor = GraphicTemplateEditor(event.target);
				if (dialog.NewTemplate)
				{
					// Check for a template with this name
					hostComponent.graphicTemplates.push(dialog.NewTemplate);
					hostComponent.refreshTemplates();
					
					// Update the display
					_templateCollectionChanged = true;
					commitProperties();
					
					//hostComponent.saveTemplates();

					// Alert that a new template has been added
					Alert.show("New Template Added","Template",Alert.OK);
				}
			}

			/** 
			 * Called when the user cancels an edit action.
			 */ 
			private function newTemplate_CancelHandler(event:Event):void
			{
				var dialog:GraphicTemplateEditor = GraphicTemplateEditor(event.target);
				newTemplate_Cancel(dialog); 
			}
			
			/** 
			 * Clears the handlers on the template editor dialog.
			 */ 
			private function newTemplate_Cancel(dialog:GraphicTemplateEditor):void
			{
				// removes the handlers for dialog being cancelled, closed or move button pressed 
				dialog.removeEventListener("graphicTemplateEditor_Save",newTemplate_SaveHandler);
				dialog.removeEventListener("graphicTemplateEditor_SaveNew",newTemplate_SaveNewHandler);
				dialog.removeEventListener("graphicTemplateEditor_Cancel",newTemplate_CancelHandler);
				dialog.removeEventListener(CloseEvent.CLOSE,newTemplate_CloseHandler);
				
				PopUpManager.removePopUp(dialog);
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		
		<s:Fade id="fadeOut" alphaFrom="1" alphaTo="0" duration="300" />
		<s:Fade id="fadeIn" alphaFrom="0" alphaTo="1" duration="300" />
		
	</fx:Declarations>
	
	<mx:SWFLoader width="30" height="30"
				  autoLoad="true"
				  horizontalCenter="0"
				  includeIn="loading"
				  scaleContent="true"
				  source="{loader}"
				  verticalCenter="0"/>
	<s:Scroller width="100%" height="100%"
				enabled.disabled="true"
				enabled.normal="true"
				excludeFrom="loading"
				focusEnabled="false"
				hasFocusableChildren="true"
				horizontalScrollPolicy="auto"
				verticalScrollPolicy="auto">
		<!--- @private -->
		<s:VGroup id="vGrp"
				  width="100%" height="100%"/>
	</s:Scroller>

	<s:HGroup horizontalAlign="center" width="100%" verticalAlign="middle" >
		<s:Button id="butAddNewTemplate" buttonMode="true" click="butAddNewTemplate_clickHandler(event)"
				  label="新建模板" left="5" height="30" toolTip="点击新建一种新的模板的使用"
				  visible="{hostComponent.organiseMode}" includeInLayout="{hostComponent.organiseMode}"
				  showEffect="fadeIn" hideEffect="fadeOut" />
		<s:Label id="labTemplateNumbers" width="100%" textAlign="center" />
		<s:Button id="butChangeOrganiseState" buttonMode="true" click="butChangeOrganiseState_clickHandler(event)"
				  skinClass="com.nzgc.viewer.skins.GraphicTemplatePickerOptionsButtonSkin" right="5" 
				  visible="{!hostComponent.organiseMode}" includeInLayout="{!hostComponent.organiseMode}"
				  width="30" height="30" toolTip="单击加载模板" />
		<s:Button id="butChangeOrganiseStateDone" buttonMode="true" click="butChangeOrganiseState_clickHandler(event)"
				  label="完成" right="5" visible="{hostComponent.organiseMode}" includeInLayout="{hostComponent.organiseMode}"
				  height="30" toolTip="单击完成变更" />
	</s:HGroup>
	
</s:Skin>
