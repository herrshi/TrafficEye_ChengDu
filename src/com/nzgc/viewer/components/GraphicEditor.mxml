<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:nzgcComponents="com.nzgc.viewer.components.*"
			   width="400" 
			   height="400"
			   title="图层属性编辑器"
			   skinClass="com.nzgc.viewer.skins.ViewerTitleWindowSkin" >
	
	<!-- Add events for calling applications to bind to. -->
	<fx:Metadata>
		[Event(name="graphicEditor_Save", type="flash.events.Event")]
		[Event(name="graphicEditor_SaveTemplate", type="flash.events.Event")]
		[Event(name="graphicEditor_Cancel", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.symbols.Symbol;
			import com.esri.ags.symbols.TextSymbol;
			import com.nzgc.viewer.components.supportClasses.GraphicPropertiesItem;
			import com.nzgc.viewer.components.supportClasses.GraphicTemplate;
			import com.nzgc.viewer.utils.GraphicUtil;
			import com.nzgc.viewer.utils.SymbolUtil;
			
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.controls.Alert;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			/* -------------------------------------------------------------------
			Component constants
			---------------------------------------------------------------------- */
			
			public static const GRAPHICEDITOR_SAVE:String = "graphicEditor_Save";
			public static const GRAPHICEDITOR_SAVETEMPLATE:String = "graphicEditor_SaveTemplate";
			public static const GRAPHICEDITOR_CANCEL:String = "graphicEditor_Cancel";
			
			
			/* -------------------------------------------------------------------
			Component variables
			---------------------------------------------------------------------- */
			
			[Bindable]
			private var _graphic:Graphic;
			[Bindable]
			private var _newGraphic:Graphic;
			
			[Bindable]
			private var _showSaveTemplate:Boolean = false;
			
			[Bindable]
			private var _newTemplate:GraphicTemplate;

			private var _title:String;
			private var _startSection:String;
			private var _endSection:String;
			private var _startTime:String;
			private var _endTime:String;
			private var _registerTime:String;
			private var _controlMeasures:String;
			private var _goRoundTheLine:String;
			
			/* -------------------------------------------------------------------
			Component properties
			---------------------------------------------------------------------- */
			
			/**
			 * Sets the graphic whos properties that will be edited/updated.
			 * <p>
			 * <b>Parameters</b><br/>
			 * <ul>
			 * <li><i>value [Graphic]:</i> Graphic whose properties  will be editied.</li>
			 * </ul>
			 * </p> 
			 */
			public function get graphic():Graphic
			{
				return _graphic;
			}
			
			public function set graphic(value:Graphic):void
			{
				if (value)
				{
					_graphic = value;
					
					// Create a new graphic to use as the edit function
					_newGraphic = GraphicUtil.CopyGraphic(_graphic);
					
					// Set the symbol editor
					symbolEditor.symbol = _newGraphic.symbol;
					
					// If textsymbol
					if (_newGraphic.symbol is TextSymbol)
					{
						txtLabelText.text = TextSymbol(_newGraphic.symbol).text;
					}
					
					_title = value.attributes.title;
					_startSection = value.attributes.startSection;
					_endSection = value.attributes.endSection;
					_startTime = value.attributes.startTime;
					_endTime = value.attributes.endTime;
					_registerTime = value.attributes.registerTime;
					_controlMeasures = value.attributes.controlMeasures;
					_goRoundTheLine = value.attributes.goRoundTheLine;
					
				}
			}
			
			/**
			 * Sets the graphic whos properties that will be edited/updated.
			 * <p>
			 * <b>Parameters</b><br/>
			 * <ul>
			 * <li><i>value [Graphic]:</i> Graphic whose properties  will be editied.</li>
			 * </ul>
			 * </p> 
			 */
			public function get newGraphic():Graphic
			{
				return _newGraphic;
			}
			
			/**
			 * Specifies whether the component allows the functionality for the creation of 
			 * a new graphic template based on current properites of the graphic being edited.
			 * <p>
			 * <b>Parameters</b><br/>
			 * <ul>
			 * <li><i>value [Boolean]:</i> Flag for whether the use can create a template. 
			 * <b>true</b> specifes the template creation functionality will be available.  
			 * <b>false</b> hides that functionality.</li>
			 * </ul>
			 * </p> 
			 */
			public function get allowTemplateCreation():Boolean
			{
				return _showSaveTemplate;
			}
			
			public function set allowTemplateCreation(value:Boolean):void
			{
				if (value)
				{
					_showSaveTemplate = value;
				}
			}
			
			
			
			/* -------------------------------------------------------------------
			Component actions
			---------------------------------------------------------------------- */
			
			/**
			 * Called when the user clicks the save template button
			 */
			protected function butSaveAsTemplate_clickHandler(event:MouseEvent):void
			{
				// Update the template
				updateNewTemplate();
				
				// Dispatch the Save New event
				dispatchEvent(new Event(GRAPHICEDITOR_SAVETEMPLATE));	
			}
			
			/**
			 * Called when the OK button is clicked.
			 */
			protected function butOK_clickHandler(event:MouseEvent):void
			{
				// Update the settings
				updateSettings();
				
				// Dispatch the Save New event
				dispatchEvent(new Event(GRAPHICEDITOR_SAVE));	
			}
			
			/**
			 * Called when the cancel button is clicked.
			 */
			protected function butCancel_clickHandler(event:MouseEvent):void
			{
				// Dispatch the Save New event
				dispatchEvent(new Event(GRAPHICEDITOR_CANCEL));	
			}
			
			private function updateSettings():void
			{
				// Update the symbol
				_newGraphic.symbol = symbolEditor.NewSymbol;
				
				// Update the label text on Textsymbols
				if (_newGraphic.symbol is TextSymbol && txtLabelText.text.length > 0)
				{
					TextSymbol(_newGraphic.symbol).text = txtLabelText.text;
				}

				/*
				// Update the graphic attributes
				//var props:GraphicPropertiesItem = _newGraphic.attributes as GraphicPropertiesItem;
				//props.title = txtTitle.text;
				//props.content = txtContent.textFlow.getText();
				//props.link = txtLink.text;
				//props.showMeasurements = chkShowMeasurements.selected;
				*/
				_newGraphic.attributes.title = _title;
				_newGraphic.attributes.startSection = _startSection;
				_newGraphic.attributes.endSection = _endSection;
				_newGraphic.attributes.startTime = _startTime;
				_newGraphic.attributes.endTime = _endTime;
				_newGraphic.attributes.registerTime = _registerTime;
				_newGraphic.attributes.controlMeasures = _controlMeasures;
				_newGraphic.attributes.goRoundTheLine = _goRoundTheLine;
				
			}
			
			/** 
			 * Called to update the settings of the new template
			 */
			private function updateNewTemplate():void
			{
				// Create a new template
				_newTemplate = new GraphicTemplate();
				
				_newTemplate.prototype = new Graphic();
				_newTemplate.prototype.symbol = symbolEditor.NewSymbol;
			} 
			
			/**
			 * Called when the user clicks on the test link event
			 */


			protected function textInput_changeHandler(event:TextOperationEvent):void
			{
				var textInput:TextInput = event.currentTarget as TextInput;
				switch(textInput.id){
					case "txtTitle" :
						_title = textInput.text;
						break;
					case "startSection" :
						_startSection = textInput.text;
						break;
					case "endSection" :
						_endSection = textInput.text;
						break;
					case "controlMeasures" :
						_controlMeasures = textInput.text;
						break;
					case "goRoundTheLine" :
						_goRoundTheLine = textInput.text;
						break;
				}
			}
			
			protected function dateField_changeHandler(event:CalendarLayoutChangeEvent):void
			{
				var dateField:DateField = event.currentTarget as DateField;
				var dateFormart:DateFormatter = new DateFormatter();
				dateFormart.formatString = "YYYY-MM-DD HH:NN:SS";
				var dateStr:String = dateFormart.format(dateField.selectedDate);
				switch(dateField.id){
					case "startTime" :
						_startTime = dateStr;
						break;
					case "endTime" :
						_endTime = dateStr;
						break;
					case "registerTime" :
						_registerTime = dateStr;
						break;
				}
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:VGroup width="100%" height="100%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" >
		
		<s:TabBar id="tabs" buttonMode="true" useHandCursor="true" dataProvider="{settingTabs}"/>
		
		<mx:ViewStack id="settingTabs" width="100%" height="100%" paddingLeft="3" 
					  paddingRight="3" paddingBottom="3" paddingTop="3" clipContent="true" >
			
			<s:NavigatorContent id="symbolTab" label="标志设置">
				<s:layout>
					<s:VerticalLayout gap="5" />
				</s:layout>
				<nzgcComponents:SymbolEditor id="symbolEditor" width="100%"/>
				
				<s:HGroup id="textSymbolSettings" width="100%" gap="5" verticalAlign="middle" 
						  visible="{_graphic.symbol is TextSymbol &amp;&amp; 
						  			_graphic.attributes.showMeasurements == false}" 
						  includeInLayout="{_graphic.symbol is TextSymbol &amp;&amp; 
						  _graphic.attributes.showMeasurements == false}" >
					<s:Label text="Label Text" width="30%" styleName="WidgetTitle"/>
					<s:TextInput id="txtLabelText" width="70%" />
				</s:HGroup>

			</s:NavigatorContent> 

			<s:NavigatorContent id="propertyTab" label="图形设置" >
				<s:layout>
					<s:VerticalLayout gap="5" />
				</s:layout>

				<s:HGroup gap="5" width="100%" verticalAlign="middle" >
					<s:Label text="标题" width="20%" styleName="WidgetTitle" textAlign="center"/>
					<s:TextInput id="txtTitle" width="80%" text="{_newGraphic.attributes.title}" change="textInput_changeHandler(event)" />
				</s:HGroup>

				<!--<s:HGroup gap="5" width="100%" verticalAlign="middle" >
					<s:Label text="内容描述" width="30%" styleName="WidgetTitle"/>
					<s:TextArea id="txtContent" width="70%" heightInLines="5" editable="true"
								textFlow="{TextConverter.importToFlow(_newGraphic.attributes.content,
								TextConverter.TEXT_FIELD_HTML_FORMAT)}" 
								change="txtContent_changeHandler(event)"/>
				</s:HGroup>-->

				<s:HGroup gap="5" width="100%" verticalAlign="middle">
					<s:Label text="开始路段" width="20%" styleName="WidgetTitle" textAlign="center"/>
					<s:TextInput id="startSection" width="80%" text="{_newGraphic.attributes.startSection}" change="textInput_changeHandler(event)" />
				</s:HGroup>

				<s:HGroup gap="5" width="100%" verticalAlign="middle">
					<s:Label text="结束路段" width="20%" styleName="WidgetTitle" textAlign="center"/>
					<s:TextInput id="endSection" width="80%" text="{_newGraphic.attributes.endSection}" change="textInput_changeHandler(event)" />
				</s:HGroup>

				<s:HGroup gap="5" width="100%" verticalAlign="middle">
					<s:Label text="开始时间" width="20%" styleName="WidgetTitle" textAlign="center"/>
					<mx:DateField id="startTime" width="70%" change="dateField_changeHandler(event)" />
				</s:HGroup>

				<s:HGroup gap="5" width="100%" verticalAlign="middle">
					<s:Label text="结束时间" width="20%" styleName="WidgetTitle" textAlign="center"/>
					<mx:DateField id="endTime" width="70%" change="dateField_changeHandler(event)" />
				</s:HGroup>

				<s:HGroup gap="5" width="100%" verticalAlign="middle">
					<s:Label text="申请时间" width="20%" styleName="WidgetTitle" textAlign="center"/>
					<mx:DateField id="registerTime" width="70%" change="dateField_changeHandler(event)" />
				</s:HGroup>

				<s:HGroup gap="5" width="100%" verticalAlign="middle">
					<s:Label text="管制措施" width="20%" styleName="WidgetTitle" textAlign="center"/>
					<s:TextInput id="controlMeasures" width="80%" text="{_newGraphic.attributes.controlMeasures}" change="textInput_changeHandler(event)" />
				</s:HGroup>

				<s:HGroup gap="5" width="100%" verticalAlign="middle">
					<s:Label text="绕行路线" width="20%" styleName="WidgetTitle" textAlign="center"/>
					<s:TextInput id="goRoundTheLine" width="80%" text="{_newGraphic.attributes.goRoundTheLine}" change="textInput_changeHandler(event)" />
				</s:HGroup>
				<!--<s:HGroup gap="5" width="100%" verticalAlign="middle" >
					<s:Label text="显示测量值" width="30%" styleName="WidgetTitle"/>
					<s:CheckBox id="chkShowMeasurements" selected="{_newGraphic.attributes.showMeasurements}" change="chkShowMeasurements_changeHandler(event)" />
				</s:HGroup>

				<s:HGroup gap="5" width="100%" verticalAlign="middle" >
					<s:Label text="跳转链接" width="30%" styleName="WidgetTitle"/>
					<s:TextInput id="txtLink" width="55%" text="{_newGraphic.attributes.link}" change="txtLink_changeHandler(event)" />
					<s:Button id="butTestLink" label="Test" click="butTestLink_clickHandler(event)" 
							  toolTip="点击来测试这个链接" enabled="{txtLink.text.length > 0}" width="15%" />
				</s:HGroup>-->
				
			</s:NavigatorContent> 
			
		</mx:ViewStack>
		
		<s:HGroup width="100%" horizontalAlign="left" verticalAlign="middle"  gap="5">
			<!-- Create new template section -->
			<s:Button id="butSaveAsTemplate" label="Save As Template" 
					  toolTip="点击创建一个新的模板基于这些特性" 
					  click="butSaveAsTemplate_clickHandler(event)" x="5"
					  visible="{_showSaveTemplate}" includeInLayout="{_showSaveTemplate}"/>
			
			<s:HGroup id="graphicActionGroup" width="100%" horizontalAlign="right" gap="5" verticalAlign="middle" >
				<s:Button id="butOK" label="应用" toolTip="点击更新选定的平面性质" 
						  click="butOK_clickHandler(event)" visible="{_graphic != null}" includeInLayout="{_graphic != null}" />
				<s:Button id="butCancel" label="取消" toolTip="点击取消图形的编辑" 
						  click="butCancel_clickHandler(event)" />
			</s:HGroup>
			
		</s:HGroup>
	</s:VGroup>
	
	
</s:TitleWindow>
