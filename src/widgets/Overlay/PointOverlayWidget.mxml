<?xml version="1.0" encoding="utf-8"?>
<!-- 
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2013 史晓青. All Rights Reserved.
//
// 在地图上添加图标
///////////////////////////////////////////////////////////////////////////
-->

<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:viewer="com.esri.viewer.*"  
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx" 
				   xmlns:esri="http://www.esri.com/2008/ags"
				   layout="absolute" 
				   creationComplete="creationCompleteHandler(event)" 
				   widgetConfigLoaded="widgetConfigLoadedHandler(event)" >
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.EditEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.portal.PopUpRenderer;
			import com.esri.ags.renderers.IRenderer;
			import com.esri.ags.symbols.Symbol;
			import com.esri.ags.tools.DrawTool;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.components.PopUpInfoWithButtons;
			import com.esri.viewer.skins.PopUpRenderer.AdvancedPopUpRendererSkin;
			import com.esri.viewer.skins.PopUpRenderer.ClassicPopUpRendererSkinWithButtons;
			import com.esri.viewer.skins.PopUpRenderer.ZaKongPopUpRendererSkin;
			import com.esri.viewer.utils.Hashtable;
			import com.esri.viewer.utils.PopUpInfoParser;
			import com.esri.viewer.utils.RendererParser;
			import com.esri.viewer.utils.SymbolParser;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.utils.UIDUtil;
			
			private var _pointOverlayLayer:GraphicsLayer;
			
			private var _pointType:String;
			
			/**
			 * 组件启动时调用的js函数，通知页面启动完成。
			 * */
			private var _widgetRunNotifyFunctionName:String;
			/**
			 * 组件关闭时调用的js函数，通知页面组件关闭。
			 * */
			private var _widgetCloseNotifyFunctionName:String;
			
			/**
			 * 处于编辑状态时，记录graphic移动过的位置
			 * 用于后退/前进等操作
			 * <listing>
			 * key: graphic.id
			 * data: array of geometry 
			 * </listing>
			 * */
			private var _movedGeometryTable:Hashtable;
			
			/**
			 * 当前新增/编辑的graphic
			 * */
			private var _selectedGraphic:Graphic;
			
			/**
			 * 新增点位时使用的symbol
			 * */
			private var _drawSymbol:Symbol;
			
			/**
			 * 弹出窗使用的皮肤类
			 * */
			private var _popUpSkinClass:String;
			
			/**
			 * 弹出窗样式。 
			 * 编辑模式时禁用弹出窗，非编辑模式时启动弹出窗
			 * */
//			private var _popUpRenderer:ClassFactory;
			private var _popUpInfo:PopUpInfoWithButtons;
			
			/**
			 * 当前模式
			 * move/add
			 * */
			private var _currentMode:String;
			private const MODE_MOVE:String = "move";
			private const MODE_ADD:String = "add";
			private const MODE_NORMAL:String = "normal";
			private const DRAW_MODE:String = DrawTool.MAPPOINT;
			
			/**
			* 点击图标直接触发事件
			* */
			private var _clickFunctionInfo:Object;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_movedGeometryTable = new Hashtable();
				
				_pointOverlayLayer = new GraphicsLayer();
				_pointOverlayLayer.name = widgetTitle;
				map.addLayer( _pointOverlayLayer );
				
				AppEvent.addListener( AppEvent.FIND_DEVICE, appevent_findDeviceHandler );
				
				AppEvent.addListener( AppEvent.WIDGET_RUN, appevent_WidgetRunHandler );
				AppEvent.addListener( AppEvent.WIDGET_CLOSE, appevent_WidgetCloseHandler );
				
				AppEvent.addListener( AppEvent.ADD_POINTS, appevent_AddPointsHandler );
				AppEvent.addListener( AppEvent.DELETE_ALL_POINTS, appevent_DeleteAllPointsHandler );
				AppEvent.addListener( AppEvent.DELETE_POINTS, appevent_DeletePointsHandler );
				
				AppEvent.addListener( AppEvent.START_MOVE_OVERLAY, appevent_StartMoveOverlayHandler );
				AppEvent.addListener( AppEvent.STOP_EDIT_OVERLAY, appevent_StopEditOverlayHandler );
				AppEvent.addListener( AppEvent.START_ADD_OVERLAY, appevent_StartAddOverlayHandler );
				AppEvent.addListener( AppEvent.STOP_ADD_OVERLAY, appevent_StopAddOverlayHandler );
				
				AppEvent.addListener( AppEvent.EDITORTOOBAR_UNDO, appevent_editorToolbarUndoHandler );
				AppEvent.addListener( AppEvent.EDITORTOOBAR_REDO, appevent_editorToolbarRedoHandler );
				AppEvent.addListener( AppEvent.EDITORTOOBAR_COMMIT, appevent_editorToolbarCommitHandler );
				AppEvent.addListener( AppEvent.EDITORTOOBAR_CANCEL, appevent_editorToolbarCancelHandler );
			}
			
			protected function widgetConfigLoadedHandler(event:Event):void
			{
				if ( configXML )
				{
					//type
					_pointType = configXML.type;
					
					//popup
					if ( configXML.popup[0] )
					{
						var popupXML:XML = configXML.popup[0];
						_popUpInfo = PopUpInfoParser.parsePopUpInfo( popupXML );
						
						_popUpSkinClass = configXML.popupskinclass || "Classic";
						/*var popUpInfo:PopUpInfoWithButtons = PopUpInfoParser.parsePopUpInfo( popupXML );
						
						_popUpRenderer = new ClassFactory( PopUpRenderer );
						_popUpRenderer.properties = 
							{ 
								popUpInfo: popUpInfo
							};
						_pointOverlayLayer.infoWindowRenderer = _popUpRenderer;*/
					}
					
					//renderer
					var rendererParser:RendererParser = new RendererParser;
					var renderer:IRenderer = rendererParser.parseRenderer( configXML );
					_pointOverlayLayer.renderer = renderer;
					
					//clickFunciton
					if ( configXML.clickfunction )
					{
						_clickFunctionInfo = 
							{
								action: String( configXML.clickfunction.action ) || "showInfoWindow",
								type: String( configXML.clickfunction.type ),
								idField: String( configXML.clickfunction.idfield )
							};
					}
					
					//drawSymbol
					if ( configXML.drawsymbol[0] )
					{
						var symbolParser:SymbolParser = new SymbolParser();
						_drawSymbol = symbolParser.parseSymbol( configXML.drawsymbol[0] );
					}
					
					//启动时的状态add/move/normal
					var initMode:String = configXML.initmode;
					if ( initMode == "add" )
					{
						_currentMode = MODE_ADD;
						AppEvent.dispatch( AppEvent.START_ADD_OVERLAY, _pointType );
					}
					else
					{
						_currentMode = MODE_NORMAL;
					}
					
					_widgetRunNotifyFunctionName = configXML.widgetrunnotify;
					_widgetCloseNotifyFunctionName = configXML.widgetclosenotify;
					
					if ( _widgetRunNotifyFunctionName != "" )
					{
						//通知页面组件创建完成
						AppEvent.dispatch( 
							AppEvent.EXTERNAL_CALL, 
							{ functionName: _widgetRunNotifyFunctionName } 
						);
					}
					
				}
			}
			
			private function appevent_WidgetRunHandler( event:AppEvent ):void
			{
				if ( ( event.data as int == widgetId ) || ( event.data as String == widgetTitle ) )
				{
					map.addLayer( _pointOverlayLayer );
					if ( _widgetRunNotifyFunctionName != "" )
					{
						//通知页面组件创建完成
						AppEvent.dispatch( 
							AppEvent.EXTERNAL_CALL, 
							{ functionName: _widgetRunNotifyFunctionName } );
					}
				}
			}
			
			private function appevent_WidgetCloseHandler( event:AppEvent ):void
			{
				if ( ( event.data as int == widgetId ) || ( event.data as String == widgetTitle ) )
				{
					map.removeLayer( _pointOverlayLayer );
					if ( _widgetRunNotifyFunctionName != "" )
					{
						//通知页面组件创建完成
						AppEvent.dispatch( 
							AppEvent.EXTERNAL_CALL, 
							{ functionName: _widgetCloseNotifyFunctionName } 
						);
					}
				}
			}
			
			private function appevent_AddPointsHandler( event:AppEvent ):void
			{
				var params:String = event.data as String;
				var paramObj:Object = JSON.parse( params );
				//类型
				var type:String = paramObj.type;
				if ( !type || type.toLowerCase() != _pointType.toLowerCase() )
					return;
				
				//点集
				var pointArray:Array = paramObj.points;
				for each ( var pointObj:Object in pointArray )
				{
					//坐标
					var x:Number = pointObj.x;
					var y:Number = pointObj.y;
					var id:String = pointObj.id;
					var fields:Object = pointObj.fields;
					
					if ( !id || id == "" )
						continue;
					
					var graphic:Graphic = getGraphicById( id );
					//已存在的点
					if ( graphic )
					{
						//若传入坐标则更新位置
						if ( !isNaN( x ) && !isNaN( y ) )
						{
							graphic.geometry = new MapPoint( x, y );
						}
						//若传入fields则更新attributes
						if ( fields )
						{
							var attributes:Object = graphic.attributes;
							//fields可能只传了变化的字段，不能直接覆盖attributes
							for ( var fieldName:String in fields )
							{
								attributes[ fieldName ] = fields[ fieldName ];
							}
						}
						graphic.refresh();
					}
						//不存在的点
					else
					{
						if ( !isNaN( x ) && !isNaN( y ) )
						{
							graphic = new Graphic( new MapPoint( x, y ) );
							graphic.id = id;
							graphic.attributes = fields || {};
							graphic.attributes.type = _pointType;
							_pointOverlayLayer.add( graphic );
						}
						else
						{
							continue;
						}
					}
					
					addGraphicClickHandler( graphic );
				}
				addSharedData( widgetTitle, _pointOverlayLayer.graphicProvider as ArrayCollection );
			}
			
			private function addGraphicClickHandler( graphic:Graphic ):void
			{
				if ( _clickFunctionInfo )
				{
					var action:String = _clickFunctionInfo.action;
					switch( action.toLowerCase() )
					{
						case "opendevice":
							graphic.addEventListener( MouseEvent.CLICK, openDevice_clickHandler );
							break;
						case "showinfowindow":
							graphic.addEventListener( MouseEvent.CLICK, showInfowWindow_clickHandler );
							break;
					}
				}
			}
			
			private function removeGraphicClickHandler( graphic:Graphic ):void
			{
				if ( _clickFunctionInfo )
				{
					var action:String = _clickFunctionInfo.action;
					switch( action.toLowerCase() )
					{
						case "opendevice":
							graphic.removeEventListener( MouseEvent.CLICK, openDevice_clickHandler );
							break;
						case "showinfowindow":
							graphic.removeEventListener( MouseEvent.CLICK, showInfowWindow_clickHandler );
							break;
					}
				}
			}
			
			private function showInfowWindow_clickHandler( event:MouseEvent ):void
			{
				var graphic:Graphic = event.currentTarget as Graphic;
				var popupRenderer:PopUpRenderer = new PopUpRenderer();
				popupRenderer.graphic = graphic;
				popupRenderer.popUpInfo = _popUpInfo;
				switch( _popUpSkinClass )
				{
					case "advanced":
						popupRenderer.setStyle( "skinClass", Class( AdvancedPopUpRendererSkin ) );
						break;
					
					case "ZaKong":
						popupRenderer.setStyle( "skinClass", Class( ZaKongPopUpRendererSkin ) );
						break;
					
					default:
						popupRenderer.setStyle( "skinClass", Class( ClassicPopUpRendererSkinWithButtons ) );
						break;
				}
				map.infoWindow.content = popupRenderer;
				map.infoWindow.contentOwner = popupRenderer.graphic;
				map.infoWindow.show( graphic.geometry as MapPoint );
			}
			
			
			private function openDevice_clickHandler( event:MouseEvent ):void
			{
				var graphic:Graphic = event.currentTarget as Graphic;
				
				var type:String = _clickFunctionInfo.type;
				if ( type == "" )
				{
					type = _pointType;
				}
				
				var idField:String = _clickFunctionInfo.idField;
				var id:String = ( idField == "" ? graphic.id : graphic.attributes[ idField ] );
				
				AppEvent.dispatch( AppEvent.EXTERNAL_CALL, 
					{
						functionName: "openDevice",
						params: [ type, id ]
					} 
				);
			}
			
			private function appevent_DeleteAllPointsHandler( event:AppEvent ):void
			{
				var type:String = event.data as String;
				if ( type && ( type.toLowerCase() == _pointType.toLowerCase() ) )
				{
					_pointOverlayLayer.clear();
				}
			}
			
			private function appevent_DeletePointsHandler( event:AppEvent ):void
			{
				var params:String = event.data as String;
				var paramObj:Object = JSON.parse( params );
				
				var type:String = paramObj.type;
				if ( !type || ( type.toLowerCase() != _pointType.toLowerCase() ) )
					return;
				
				var idArray:Array = paramObj.ids;
				for each ( var id:String in idArray )
				{
					for each ( var graphic:Graphic in _pointOverlayLayer.graphicProvider )
					{
						if ( id == graphic.id )
						{
							_pointOverlayLayer.remove( graphic );
							break;
						}
					}
				}
			}
			
			/**
			 * 在当前显示graphic中找到id对应的graphic
			 * */
			private function getGraphicById( id:String ):Graphic
			{
				for each ( var graphic:Graphic in _pointOverlayLayer.graphicProvider )
				{
					if ( id == graphic.id )
					{
						return graphic;
					}
				}
				return null;
			}
			
			private function appevent_StartMoveOverlayHandler( event:AppEvent ):void
			{
				var params:String = event.data as String;
				var paramObj:Object = JSON.parse( params );
				var type:String = paramObj.type;
				var idArray:Array = paramObj.ids;
				
				if ( type != _pointType )
				{
					return;
				}
				
				//打开编辑栏
				openWidget( "编辑工具栏" );
				
				_currentMode = MODE_MOVE;
				
				//编辑状态时不显示infoWindow
				_pointOverlayLayer.infoWindowRenderer = null;
				
				//没有指定id时，所有graphic都可以移动
				if ( !idArray || idArray.length == 0 )
				{
					//给graphicLayer增加点击事件，点击到的graphic可以移动
					//					_pointOverylayLayer.addEventListener( MouseEvent.CLICK, pointOverlayLayer_ClickHandler );
				}
				//只有指定的graphic可以移动
				else
				{
					//找到id对应的graphic
					var graphics:Array = [];
					for each ( var id:String in idArray )
					{
						var graphic:Graphic = getGraphicById( id );
						if ( graphic )
						{
							graphic.filters = [ editHighlightGlowFilter ];
							graphics.push( graphic );
							//保存初始位置
							_movedGeometryTable.add( graphic.id, [ graphic.geometry ] );
							_currentGeometryIndex = 0;
						}
					}
					//激活编辑工具
					editTool.activate( EditTool.MOVE, graphics );
				}
			}
			
			private function appevent_StopEditOverlayHandler( event:AppEvent ):void
			{
				var type:String = event.data as String;
				if ( type != _pointType )
				{
					return;
				}
				
				_currentMode = MODE_NORMAL;
				closeWidget( "编辑工具栏" );
				
				editTool.deactivate();
				_pointOverlayLayer.removeEventListener( MouseEvent.CLICK, pointOverlayLayer_ClickHandler );
//				_pointOverlayLayer.infoWindowRenderer = _popUpRenderer;
				for each ( var graphic:Graphic in _pointOverlayLayer.graphicProvider )
				{
					addGraphicClickHandler( graphic );
				}
			}
			
			private function appevent_StartAddOverlayHandler( event:AppEvent ):void
			{
				var type:String = event.data as String;
				if ( type != _pointType )
				{
					return;
				}
				
				_currentMode = MODE_ADD;
				
				openWidget( "编辑工具栏" );
				
				setMapAction( DRAW_MODE, null, _drawSymbol, map_drawEndHandler );
			}
			
			private function map_drawEndHandler( event:DrawEvent ):void
			{
				//显示
				var drawGraphic:Graphic = event.graphic;
				drawGraphic.id = UIDUtil.createUID();
				_movedGeometryTable.add( drawGraphic.id, [ drawGraphic.geometry ] );
				_pointOverlayLayer.add( drawGraphic );
				_selectedGraphic = drawGraphic;
				
				//设置移动
				drawGraphic.filters = [ editHighlightGlowFilter ];
				editTool.activate( EditTool.MOVE, [ drawGraphic ] );
			}
			
			private function appevent_StopAddOverlayHandler( event:AppEvent ):void
			{
				var type:String = event.data as String;
				if ( type != _pointType )
				{
					return;
				}
				
				_currentMode = MODE_NORMAL;
				closeWidget( "编辑工具栏" );
				setMapAction( null, null, null, null );
				editTool.deactivate();
				
				_pointOverlayLayer.removeEventListener( MouseEvent.CLICK, pointOverlayLayer_ClickHandler );
//				_pointOverlayLayer.infoWindowRenderer = _popUpRenderer;
				for each ( var graphic:Graphic in _pointOverlayLayer.graphicProvider )
				{
					addGraphicClickHandler( graphic );
				}
			}
			
			/**
			 * 点击某一个graphic，激活编辑工具，使这个graphic可以移动
			 * */
			private function pointOverlayLayer_ClickHandler( event:MouseEvent ):void
			{
				editTool.deactivate();
				
				if ( _selectedGraphic )
				{
					_selectedGraphic.filters = [];
					_selectedGraphic = null;
				}
				
				if ( event.target is Graphic )
				{
					_selectedGraphic = Graphic( event.target );
				}
					//如果是PictureMarkerSymbol需要判断event.grahpic.parent
				else if ( event.target.parent is Graphic )
				{
					_selectedGraphic = Graphic( event.target.parent );
				}
				
				if ( _selectedGraphic )
				{
					_selectedGraphic.filters = [ editHighlightGlowFilter ];
					//保存初始位置
					_movedGeometryTable.add( _selectedGraphic.id, [ _selectedGraphic.geometry ] );
					editTool.activate( EditTool.MOVE, [ _selectedGraphic ] );
				}
			}
			
			/**
			 * 记录当前的geometry在历史GeometryArray中的位置
			 * */
			private var _currentGeometryIndex:int;
			
			protected function editTool_graphicsMoveStopHandler(event:EditEvent):void
			{
				//每次移动一个点
				if ( event.graphics.length > 0 )
				{
					_selectedGraphic = event.graphics[ 0 ];
					//保存此次移动的位置
					var geometryArray:Array = _movedGeometryTable.find( _selectedGraphic.id );
					if ( geometryArray )
					{
						//先删除当前序号以后的记录
						geometryArray.splice( _currentGeometryIndex + 1 );
						
						geometryArray.push( _selectedGraphic.geometry );
						_currentGeometryIndex = geometryArray.length - 1;
						
						/*for each ( var geometry:Geometry in geometryArray )
						{
						trace( JSONUtil.encode( geometry ) );
						}*/
					}
				}
			}
			
			private function appevent_editorToolbarUndoHandler( event:AppEvent ):void
			{
				if ( _selectedGraphic  )
				{
					var geometryArray:Array = _movedGeometryTable.find( _selectedGraphic.id );
					if ( geometryArray && _currentGeometryIndex > 0 )
					{
						_currentGeometryIndex--;
						_selectedGraphic.geometry = geometryArray[ _currentGeometryIndex ];
					}
				}
			}
			
			private function appevent_editorToolbarRedoHandler( event:AppEvent ):void
			{
				if ( _selectedGraphic )
				{
					var geometryArray:Array = _movedGeometryTable.find( _selectedGraphic.id );
					if ( geometryArray && _currentGeometryIndex < geometryArray.length - 1 )
					{
						_currentGeometryIndex++;
						_selectedGraphic.geometry = geometryArray[ _currentGeometryIndex ];
					}
				}
			}
			
			private function appevent_editorToolbarCommitHandler( event:AppEvent ):void
			{
				if ( _selectedGraphic )
				{
					Alert.show( "是否提交更改？", "提交确认", Alert.YES | Alert.NO, map, commitAlertClickHandler );
				}
			}
			
			private function commitAlertClickHandler( event:CloseEvent ):void
			{
				if ( event.detail == Alert.YES )
				{
					var dataObj:Object;
					var dataString:String;
					
					//清除glow效果
					_selectedGraphic.filters = [];
					
					switch( _currentMode )
					{
						//当前处于移动状态
						case MODE_MOVE:
						{
							var pointArray:Array = [];
							for each ( var graphicId:String in _movedGeometryTable.getKeySet() )
							{
								var geometryArray:Array = _movedGeometryTable.find( graphicId );
								//获取最新的geometry
								var latestGeometry:Geometry = geometryArray[ geometryArray.length - 1 ];
								var pointObj:Object = 
									{ 
										id: graphicId, 
										geometry: latestGeometry 
									};
								pointArray.push( pointObj );
							}
							
							dataObj = 
								{ 
									type: _pointType, 
									geometries: pointArray 
								};
							dataString = JSON.stringify( dataObj );
							AppEvent.dispatch( AppEvent.EXTERNAL_CALL, 
								{ 
									functionName: "editPointGeometry", 
									params: [ dataString ] 
								} 
							);
							
							//停止编辑
							editTool.deactivate();
//							setMapAction( null, null, null, null );
//							_pointOverlayLayer.infoWindowRenderer = _popUpRenderer;
							for each ( var graphic:Graphic in _pointOverlayLayer.graphicProvider )
							{
								addGraphicClickHandler( graphic );
							}
							//清除历史数据
							_movedGeometryTable.clear();
							break;
						}
							
						//当前处于新增状态
						case MODE_ADD:
						{
							if ( _selectedGraphic )
							{
								dataObj = 
									{ 
										type: _pointType, 
										id: _selectedGraphic.id, 
										geometry: _selectedGraphic.geometry 
									};
								dataString = JSON.stringify( dataObj );
								AppEvent.dispatch( AppEvent.EXTERNAL_CALL, 
									{ 
										functionName: "addPointGeometry", 
										params: [ dataString ] 
									} 
								);
								
								//进入新增状态，新增下一个点
								setMapAction( DRAW_MODE, null, _drawSymbol, map_drawEndHandler );
								//清除历史数据
								_movedGeometryTable.clear();
							}
							
							break;
						}
					}
				}
			}
			
			private function appevent_editorToolbarCancelHandler( event:AppEvent ):void
			{
				if ( _selectedGraphic )
				{
					Alert.show( "是否放弃更改？", "放弃确认", Alert.YES | Alert.NO, map, cancelAlertClickHandler );
				}
			}
			
			private function cancelAlertClickHandler( event:CloseEvent ):void
			{
				//清除glow效果
				_selectedGraphic.filters = [];
				
				//停止编辑
				editTool.deactivate();
//				_pointOverlayLayer.infoWindowRenderer = _popUpRenderer;
				for each ( var graphic:Graphic in _pointOverlayLayer.graphicProvider )
				{
					addGraphicClickHandler( graphic );
				}
				//回到初始位置
				for each ( var graphicId:String in _movedGeometryTable.getKeySet() )
				{
					var geometryArray:Array = _movedGeometryTable.find( graphicId );
					graphic = getGraphicById( graphicId );
					graphic.geometry = geometryArray[ 0 ];
					
					//如果是新增模式，要把新增的点删掉
					if ( _currentMode == MODE_ADD )
					{
						_pointOverlayLayer.remove( graphic );
						//进入新增状态，新增下一个点
						setMapAction( DRAW_MODE, null, _drawSymbol, map_drawEndHandler );
					}
					
				}
				//清除历史数据
				_movedGeometryTable.clear();
			}
			
			private function appevent_findDeviceHandler( event:AppEvent ):void
			{
				var type:String = event.data.type;
				var id:String = event.data.id;
				var showInfo:Boolean = event.data.showInfo || true;
				
				if ( type != _pointType )
				{
					return;
				}
				
				for each ( var graphic:Graphic in _pointOverlayLayer.graphicProvider )
				{
					if ( graphic.id == id )
					{
						map.centerAt( graphic.geometry as MapPoint );
						//处于新增、编辑模式时不显示弹出框
						if ( _currentMode == MODE_NORMAL && showInfo )
						{
							var popupRenderer:PopUpRenderer = new PopUpRenderer();
							popupRenderer.graphic = graphic;
							popupRenderer.popUpInfo = _popUpInfo;
							switch( _popUpSkinClass )
							{
								case "advanced":
									popupRenderer.setStyle( "skinClass", Class( AdvancedPopUpRendererSkin ) );
									break;
								
								case "ZaKong":
									popupRenderer.setStyle( "skinClass", Class( ZaKongPopUpRendererSkin ) );
									break;
								
								default:
									popupRenderer.setStyle( "skinClass", Class( ClassicPopUpRendererSkinWithButtons ) );
									break;
							}
							map.infoWindow.content = popupRenderer;
							map.infoWindow.contentOwner = popupRenderer.graphic;
							map.infoWindow.show( graphic.geometry as MapPoint );
						}
						break;
					}
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>		
		<!-- 编辑已有元素 -->
		<esri:EditTool id="editTool" map="{map}" 
					   graphicsMoveStop="editTool_graphicsMoveStopHandler(event)" />
		
		<!-- 高亮显示当前在编辑的元素 -->
		<s:GlowFilter id="editHighlightGlowFilter" color="0xFF0000" alpha="1" blurX="32" blurY="32"/>
	</fx:Declarations>
</viewer:BaseWidget>
