<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" 
				   xmlns:viewer="com.esri.viewer.*"  
				   xmlns:checkTree="com.esri.viewer.components.checkTree.*"
				   xmlns:esri="http://www.esri.com/2008/ags"
				   layout="absolute" 
				   creationComplete="this_creationCompleteHandler(event)" 
				   widgetConfigLoaded="this_widgetConfigLoadedHandler(event)" >
				
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.components.ContentNavigator;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.FindEvent;
			import com.esri.ags.events.IdentifyEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.portal.PopUpRenderer;
			import com.esri.ags.renderers.Renderer;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.symbols.Symbol;
			import com.esri.ags.tasks.GeometryServiceSingleton;
			import com.esri.ags.tasks.supportClasses.FindResult;
			import com.esri.ags.tasks.supportClasses.IdentifyResult;
			import com.esri.ags.tools.DrawTool;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.WidgetStates;
			import com.esri.viewer.components.PopUpInfoWithButtons;
			import com.esri.viewer.components.checkTree.CheckTreeItemRenderer;
			import com.esri.viewer.utils.Hashtable;
			import com.esri.viewer.utils.PopUpInfoParser;
			import com.esri.viewer.utils.RendererParser;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Fault;
			import mx.rpc.events.FaultEvent;
			import mx.utils.StringUtil;
			
//			import widgets.PoliceManagePDA.Police;
//			import widgets.PoliceManagePDA.PolicePoint;
			
			private var _selectedDrawingIcon:Image;
			
			[Bindable] 
			private var _searchUrl:String;
			[Bindable]
			private var _searchFieldArray:Array;
			[Bindable]
			private var _searchLayerIdArray:Array;
			
			private var _selectionColor:Number;
			
			private var _drawLayer:GraphicsLayer;
			private var _searchResultLayer:GraphicsLayer;
			
			private var _pointSymbol:SimpleMarkerSymbol;
			private var _polylineSymbol:SimpleLineSymbol;
			private var _polygonSymbol:SimpleFillSymbol;
			
			private var _popUpRendererTable:Hashtable;
			
			/**
			 * 搜索结果
			 * */
			[Bindable]
			private var _treeDataSource:ArrayCollection;
			
			/**
			 * Overlay相关配置
			 * */
			private var _searchOverlayerInfoArray:Array;
			
			protected function this_creationCompleteHandler(event:FlexEvent):void
			{
				AppEvent.addListener( AppEvent.SET_SEARCH_TEXT, appevent_setSearchTextHandler );
				
//				AppEvent.addListener( AppEvent.WIDGET_RUN, appevent_WidgetRunHandler );
//				AppEvent.addListener( AppEvent.WIDGET_CLOSE, appevent_WidgetCloseHandler );
				AppEvent.addListener( AppEvent.WIDGET_STATE_CHANGED, appevent_WidgetStateChangedHandler );
				
				_popUpRendererTable = new Hashtable();
				_treeDataSource = new ArrayCollection();
				_searchOverlayerInfoArray = new Array();
				
				_selectionColor = getStyle( "selectionColor" );
				
				_searchResultLayer = new GraphicsLayer();
				map.addLayer( _searchResultLayer );
				
				_drawLayer = new GraphicsLayer();
				map.addLayer( _drawLayer );
				map.reorderLayer( _drawLayer.id, 1 );
				
				_pointSymbol = new SimpleMarkerSymbol( SimpleMarkerSymbol.STYLE_CIRCLE, 10, _selectionColor );
				_polylineSymbol = new SimpleLineSymbol( SimpleLineSymbol.STYLE_SOLID, _selectionColor, 1, 2 );
				_polygonSymbol = new SimpleFillSymbol( SimpleFillSymbol.STYLE_SOLID, _selectionColor, 0.2, 
					new SimpleLineSymbol( SimpleLineSymbol.STYLE_SOLID, _selectionColor, 1, 2 ) );
				
				geometryService.url = GeometryServiceSingleton.instance.url;
				geometryService.token = GeometryServiceSingleton.instance.token;
				geometryService.proxyURL = GeometryServiceSingleton.instance.proxyURL;
			}
			
			private function appevent_WidgetStateChangedHandler( event:AppEvent ):void
			{
				if ( ( event.data.id == widgetId ) )
				{
					if ( event.data.state == WidgetStates.WIDGET_CLOSED )
					{
						_drawLayer.clear();
						map.removeLayer( _drawLayer );
						_searchResultLayer.clear();
						map.removeLayer( _searchResultLayer );
					}
					else if ( event.data.state == WidgetStates.WIDGET_OPENED )
					{
						map.addLayer( _drawLayer );
						map.addLayer( _searchResultLayer );
//						map.reorderLayer( _drawLayer.id, 1 );
					}
				}
			}
			
			protected function this_widgetConfigLoadedHandler(event:Event):void
			{
				if ( configXML )
				{
					_searchUrl = configXML.layerinfo.url;
					if ( configData.serverIp )
					{
						_searchUrl = _searchUrl.replace( "[serverip]", configData.serverIp );
					}
					var searchFields:String = configXML.layerinfo.fields;
					_searchFieldArray = searchFields.split( "," );
					var searchLayerIds:String = configXML.layerinfo.layerids;
					_searchLayerIdArray = searchLayerIds.split( "," );
					
					//renderer
					var rendererParser:RendererParser = new RendererParser();
					var renderer:Renderer = rendererParser.parseRenderer( configXML.layerinfo[0] );
					_searchResultLayer.renderer = renderer;
					
					//popup
					for each ( var popUpXML:XML in configXML.layerinfo.popups.popup )
					{
						var layerName:String = popUpXML.@layername;
						var popUpInfo:PopUpInfoWithButtons = PopUpInfoParser.parsePopUpInfo( popUpXML );
						
						var popUpRenderer:ClassFactory = new ClassFactory( PopUpRenderer );
						popUpRenderer.properties = 
							{ 
								popUpInfo: popUpInfo
							};
						_popUpRendererTable.add( layerName, popUpRenderer );
					}
					
					//overlay
					if ( configXML.overlays[0] )
					{
						for each ( var overlayXML:XML in configXML.overlays[0].overlay )
						{
							var name:String = overlayXML.@name;
							var label:String = overlayXML.@label;
							var titleField:String = overlayXML.@titlefield;
							var idField:String = overlayXML.@idfield;
							var selected:Boolean = overlayXML.@defaultselected == "false" ? false : true;
							
							_searchOverlayerInfoArray.push( 
								{ 
									name: name,
									label: label,
									titleField: titleField,
									idField: idField,
									selected: selected
								} 
							);
						}
					}
					
					var showGraphicSearch:Boolean = configXML.showgraphicsearch == "false" ? false : true;
					if ( showGraphicSearch )
					{
						wTemplate.addTitlebarButton( "assets/images/i_searchgraphical.png", 
							"图形搜索", showStateGraphicalSearch );
						showStateGraphicalSearch();
					}
					
					var showTextSearch:Boolean = configXML.showtextsearch == "false" ? false : true;
					if ( showTextSearch )
					{
						wTemplate.addTitlebarButton( "assets/images/i_searchtext.png", 
							"文字搜索", showStateTextSearch);
						if ( !showGraphicSearch )
						{
							showStateTextSearch();
						}
					}
				}
			}
			
			private function showStateGraphicalSearch():void
			{
				this.currentState = "graphicalInput";
			}
			
			private function showStateTextSearch():void
			{
				this.currentState = "textInput";
			}
			
			private function appevent_setSearchTextHandler( event:AppEvent ):void
			{
				var searchText:String = event.data as String;
				txtKeyWord.text = searchText;
			}
			
			private function activateDrawTool(event:MouseEvent):void
			{
				_selectedDrawingIcon = Image( event.currentTarget );
				clearSelectionFilter();
				_selectedDrawingIcon.filters = [ glowFilter ];
				
				var drawName:String = _selectedDrawingIcon.name;
				var drawSymbol:Symbol;
				switch( drawName )
				{
					case DrawTool.MAPPOINT:
						drawSymbol = _pointSymbol;
						break;
						
					case DrawTool.POLYLINE:
						drawSymbol = _polylineSymbol;
						break;
					
					case DrawTool.EXTENT:
					case DrawTool.POLYGON:
						drawSymbol = _polygonSymbol;
						break;
				}
				setMapAction( drawName, "", drawSymbol, searchDrawEnd );
			}
			
			private function searchDrawEnd( event:DrawEvent ):void
			{
				_selectedDrawingIcon = null;
				clearSelectionFilter();
				
				var drawGraphic:Graphic = event.graphic;
				_drawLayer.add( drawGraphic );
				
				var distance:Number = Number( rdgrpBufferDistance.selectedValue );
				if ( distance == 0 )
				{
					if ( _searchUrl && _searchUrl != "" )
					{
						executeIdentify( drawGraphic.geometry );
					}
					
					if ( _searchOverlayerInfoArray && _searchOverlayerInfoArray.length > 0 )
					{
						searchOverlay( drawGraphic.geometry );
					}
					
				}
				else
				{
					bufferParam.geometries = [ drawGraphic.geometry ];
					//10.0中没有测地线选项
					//对点做buffer，单位是米，对线、面做buffer，单位是角度
					//10.1中设置bufferParam.geodesic=true，单位不用转换
					if ( drawGraphic.geometry.type != Geometry.MAPPOINT && 
						drawGraphic.geometry.type != Geometry.MULTIPOINT )
					{
						distance = distance / 6378137.0 * 180.0 / Math.PI;
					}
					bufferParam.distances = [ distance ];
//					geometryService.buffer( bufferParam );
					geometryService.buffer( bufferParam, 
						new AsyncResponder( geometryService_bufferCompleteHandler, faultHandler, null ) );
				}
			}
			
			private function executeIdentify( geometry:Geometry ):void
			{
				identifyParam.geometry = geometry;
				identifyTask.execute( identifyParam );
			}
			
			private function iconRollOverHandler(event:MouseEvent):void
			{
				clearSelectionFilter();
				event.target.filters = [ glowFilter ];
			}
			
			private function iconRollOutHandler(event:MouseEvent):void
			{
				clearSelectionFilter();
			}
			
			private function clearSelectionFilter():void
			{
				for ( var i:int = 0; i < imageGroup.numChildren; i++ )
				{
					if ( imageGroup.getChildAt(i).filters && imageGroup.getChildAt(i).filters.length > 0 )
					{
						if ( !( _selectedDrawingIcon && imageGroup.getChildAt(i) == _selectedDrawingIcon ) )
						{
							imageGroup.getChildAt(i).filters = [];
						}
					}
				}
			}
			
			private var _popUpRenderer:PopUpRenderer = new PopUpRenderer();
			
			protected function trResult_changeHandler(event:ListEvent):void
			{
				var selectedItem:Object = trResult.selectedItem;
				if ( selectedItem )
				{
					var graphic:Graphic = selectedItem.graphic;
					if ( graphic )
					{
						var centerPoint:MapPoint = getGeomCenter( graphic );
						map.centerAt( centerPoint );
						
						var contentNavigator:ContentNavigator = new ContentNavigator();
						contentNavigator.dataProvider = new ArrayList([ graphic ]);
						map.infoWindowContent = contentNavigator;
						map.infoWindow.show( centerPoint );
						
						/*var popUpRendererClassFactory:ClassFactory = graphic.infoWindowRenderer as ClassFactory;
						_popUpRenderer.popUpInfo = popUpRendererClassFactory.properties.popUpInfo;
						_popUpRenderer.graphic = graphic;
						
						map.infoWindow.content = _popUpRenderer;
						map.infoWindow.contentOwner = graphic;
						map.infoWindow.show( centerPoint );*/
					}
				}
				
			}
			
			private function getGeomCenter(graphic:Graphic):MapPoint
			{
				var point:MapPoint;
				var geometry:Geometry = graphic.geometry;
				
				if (geometry)
				{
					switch (geometry.type)
					{
						case Geometry.MAPPOINT:
						{
							point = geometry as MapPoint;
							break;
						}
						case Geometry.POLYLINE:
						{
							const pl:Polyline = geometry as Polyline;
							const pathCount:Number = pl.paths.length;
							const pathIndex:int = int((pathCount / 2) - 1);
							const midPath:Array = pl.paths[pathIndex];
							const ptCount:Number = midPath.length;
							const ptIndex:int = int((ptCount / 2) - 1);
							point = pl.getPoint(pathIndex, ptIndex);
							break;
						}
						case Geometry.POLYGON:
						{
							const poly:Polygon = geometry as Polygon;
							point = poly.extent.center;
							break;
						}
					}
				}
				
				return point;
			}
			
			protected function trResult_doubleClickHandler(event:MouseEvent):void
			{
				var selectedItem:Object = trResult.selectedItem;
				var isOpen:Boolean = trResult.isItemOpen( selectedItem );
				trResult.expandItem( selectedItem, !isOpen );
			}
			
			protected function identifyTask_executeCompleteHandler(event:IdentifyEvent):void
			{
				var results:Array = event.identifyResults;
				if ( results && results.length > 0 )
				{
					for each ( var identifyResult:IdentifyResult in results )
					{
						var displayFieldName:String = identifyResult.displayFieldName;
						var layerName:String = identifyResult.layerName;
						var graphic:Graphic = identifyResult.feature;
						var label:String = graphic.attributes[displayFieldName];
						
						var popUpRenderer:ClassFactory = _popUpRendererTable.find( layerName );
						if ( !popUpRenderer )
						{
							popUpRenderer = _popUpRendererTable.find( "default" );
						}
						var popUpInfo:PopUpInfoWithButtons = popUpRenderer.properties.popUpInfo;
						var idFieldName:String = popUpInfo.idFieldName;
						graphic.attributes.layerName = layerName;
						graphic.id = graphic.attributes[idFieldName];
						
						var layerNode:Object = getLayerNode( layerName );
						var children:ArrayCollection = layerNode.children;
						children.addItem( 
							{ 
								label:label, 
								graphic:graphic, 
								state: CheckTreeItemRenderer.STATE_CHECKED 
							} 
						);
						
						graphic.infoWindowRenderer = popUpRenderer;
						_searchResultLayer.add( graphic );
					}
				}
			}
			
			private function getLayerNode( layerName:String ):Object
			{
				var layerNode:Object;
				for each ( layerNode in _treeDataSource )
				{
					if ( layerNode.label == layerName )
					{
						return layerNode;
					}
				}
				
				layerNode = { label: layerName, children: new ArrayCollection(), state: 1 };
				_treeDataSource.addItem( layerNode );
				return layerNode;
			}
			
			protected function geometryService_bufferCompleteHandler( item:Object, token:Object = null ):void
			{
				var bufferResultArray:Array = item as Array;
				for ( var i:uint = 0; i < bufferResultArray.length; i++ )
				{
					var bufferPolygon:Polygon = bufferResultArray[i] as Polygon;
					var bufferGraphic:Graphic = new Graphic( bufferPolygon, _polygonSymbol );
					_drawLayer.add( bufferGraphic );
					executeIdentify( bufferGraphic.geometry );
					searchOverlay( bufferGraphic.geometry );
				}
			}
			
			private function faultEventHandler( event:FaultEvent ):void
			{
				CursorManager.removeBusyCursor();
				var strInfo: String = "Error: ";
				strInfo += "Event Headers: " + event.headers + "\n";
				strInfo += "Event Target: " + event.target + "\n";
				strInfo += "Event Type: " + event.type + "\n";
				strInfo += "Fault Code: " + event.fault.faultCode + "\n";
				strInfo += "Fault Info: " + event.fault.faultString + "\n";
				strInfo += "Fault Detail: " + event.fault.faultDetail;
				showError( strInfo );
			}
			
			private function faultHandler( fault:Fault, token:Object ):void
			{
				var strInfo: String = "Error: ";
				strInfo += "Fault Code: " + fault.faultCode + "\n";
				strInfo += "Fault Info: " + fault.faultString + "\n";
				strInfo += "Fault Detail: " + fault.faultDetail;
				showError( strInfo );
			}
			
			protected function txtKeyWord_keyDownHandler(event:KeyboardEvent):void
			{
				if ( event.keyCode == 13 )
				{
					btnFind.dispatchEvent( new MouseEvent( MouseEvent.CLICK ) );
				}
			}
			
			protected function btnFind_clickHandler(event:MouseEvent):void
			{
				_searchResultLayer.clear();
				_treeDataSource.removeAll();
				
				var searchTextArray:Array = txtKeyWord.text.split( " " );
				for each ( var searchText:String in searchTextArray )
				{
					findParam.searchText = searchText;
					
					CursorManager.setBusyCursor();
					findTask.execute( findParam );
				}
				
			}
			
			protected function findTask_executeCompleteHandler(event:FindEvent):void
			{
				CursorManager.removeBusyCursor();
				
				for each ( var findResult:FindResult in event.findResults )
				{
					var label:String = findResult.value;
					var graphic:Graphic = findResult.feature;
					var layerName:String = findResult.layerName;
					
					graphic.attributes.layerName = layerName;
					
					var layerNode:Object = getLayerNode( layerName );
					var children:ArrayCollection = layerNode.children;
					children.addItem( 
						{ 
							label:label, 
							graphic:graphic, 
							state: CheckTreeItemRenderer.STATE_CHECKED 
						} 
					);
					
					var popUpRenderer:ClassFactory = _popUpRendererTable.find( layerName );
					if ( !popUpRenderer )
					{
						popUpRenderer = _popUpRendererTable.find( "default" );
					}
					graphic.infoWindowRenderer = popUpRenderer;
					_searchResultLayer.add( graphic );
				}
			}
			
			protected function imageClear_clickHandler(event:MouseEvent):void
			{
				_drawLayer.clear();
				_searchResultLayer.clear();
				_treeDataSource.removeAll();
			}
			
			private function searchOverlay( geom:Geometry ):void
			{
				//请求所有数据，筛选其中需要的Overlay数据
				AppEvent.dispatch( AppEvent.DATA_FETCH_ALL, null, dataAllFetchedHandler );
				
				function dataAllFetchedHandler( dataTable:Hashtable ):void
				{
					var overlayGeometryArray:Array = [];
					var overlayGraphicArray:Array = [];
					
					for each ( var overlayObj:Object in _searchOverlayerInfoArray )
					{
						var overlayName:String = overlayObj.name;
						var overlayLabel:String = overlayObj.label;
						var overlayTitleField:String = overlayObj.titleField;
						
						var graphicProvider:ArrayCollection = dataTable.find( overlayName ) as ArrayCollection;
						if ( graphicProvider && graphicProvider.length > 0 )
						{
							for each ( var graphic:Graphic in graphicProvider )
							{
								if ( overlayLabel.indexOf( "警员" ) > -1 )
								{
									var policeGraphic:Graphic = new Graphic( graphic.geometry );
									policeGraphic.geometry.spatialReference = map.spatialReference;
									policeGraphic.attributes = 
										{  
											deptName: graphic.attributes.policeInfo.deptName,
											teamName: graphic.attributes.policeInfo.teamName,
											postName: graphic.attributes.policeInfo.postName,
											timePeriod: graphic.attributes.policeInfo.timePeriod,
											policeName: graphic.attributes.policeInfo.policeName,
											policeGpsCode: graphic.attributes.policeInfo.policeGpsCode,
											status: graphic.attributes.policeInfo.status,
											overlayName: overlayName,
											overlayLabel: overlayLabel,
											titleField: overlayTitleField
										};
									overlayGraphicArray.push( policeGraphic );
									overlayGeometryArray.push( policeGraphic.geometry );
								}
								else
								{
									graphic.geometry.spatialReference = map.spatialReference;
									graphic.attributes.overlayName = overlayName;
									graphic.attributes.overlayLabel = overlayLabel;
									graphic.attributes.titleField = overlayTitleField;
									overlayGraphicArray.push( graphic );
									overlayGeometryArray.push( graphic.geometry );
								}
							}
						}
					}
					
					if ( overlayGeometryArray.length > 0 )
					{
						relationParams.geometries1 = overlayGeometryArray;
						relationParams.geometries2 = [geom];
						geometryService.relation( 
							relationParams, 
							new AsyncResponder( geometryService_relationCompleteHandler, 
								faultHandler, overlayGraphicArray ) 
						);
					}
				}
			}
			
			private function geometryService_relationCompleteHandler( item:Object, token:Object = null ):void
			{
				var result:Array = item as Array;
				var graphicArray:Array = token as Array;
				
				for each (var obj:Object in result)
				{
					var resultPoint:MapPoint = obj.geometry1 as MapPoint;
					var overlayGraphic:Graphic = new Graphic( resultPoint );
					
					for each ( var graphic:Graphic in graphicArray )
					{
						var overlayPoint:MapPoint = graphic.geometry as MapPoint;
						if ( resultPoint.x == overlayPoint.x && resultPoint.y == overlayPoint.y )
						{
							var overlayName:String = graphic.attributes.overlayName;
							var overlayLabel:String = graphic.attributes.overlayLabel;
							var titleField:String = graphic.attributes.titleField;
							
							overlayGraphic.attributes = graphic.attributes;
							overlayGraphic.attributes.layerName = overlayName;
							overlayGraphic.id = graphic.id;
							
							var layerNode:Object = getLayerNode( overlayLabel );
							var children:ArrayCollection = layerNode.children;
							children.addItem( 
								{ 
									label: StringUtil.trim( graphic.attributes[titleField] ), 
									graphic:overlayGraphic, 
									state: CheckTreeItemRenderer.STATE_CHECKED 
								} 
							);
							
							var popUpRenderer:ClassFactory = _popUpRendererTable.find( overlayName );
							if ( !popUpRenderer )
							{
								popUpRenderer = _popUpRendererTable.find( "default" );
							}
							overlayGraphic.infoWindowRenderer = popUpRenderer;
							_searchResultLayer.add( overlayGraphic );
							break;
						}
					} 
				}
			}
			
			protected function btnClear_clickHandler(event:MouseEvent):void
			{
				_drawLayer.clear();
				_searchResultLayer.clear();
				_treeDataSource.removeAll();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:GlowFilter id="glowFilter"
					  alpha="1"
					  color="{getStyle('focusColor')}"
					  inner="true"
					  strength="2"/>
		
		<s:RadioButtonGroup id="rdgrpBufferDistance"/>
		
		<esri:GeometryService id="geometryService"/>
		
		<esri:BufferParameters id="bufferParam"
							   unit="{GeometryService.UNIT_METER}" 
							   bufferSpatialReference="{map.spatialReference}"
							   outSpatialReference="{map.spatialReference}"/>
		
		<esri:IdentifyTask id="identifyTask" url="{_searchUrl}" 
						   executeComplete="identifyTask_executeCompleteHandler(event)" 
						   fault="faultEventHandler(event)"/>
		
		<esri:IdentifyParameters id="identifyParam" 
								 returnGeometry="true" 
								 tolerance="3" 
								 layerOption="all"
								 layerIds="{_searchLayerIdArray}"
								 width="{map.width}" height="{map.height}" 
								 mapExtent="{map.extent}" spatialReference="{map.spatialReference}"/>
		
		<esri:FindTask id="findTask"
					   url="{_searchUrl}"
					   executeComplete="findTask_executeCompleteHandler(event)" 
					   fault="faultEventHandler(event)"/>
		
		<esri:FindParameters id="findParam" 
							 contains="true" 
							 layerIds="{_searchLayerIdArray}" 
							 searchFields="{_searchFieldArray}"
							 returnGeometry="true"/>
		
		<esri:RelationParameters id="relationParams" 
								 spatialRelationship="{RelationParameters.SPATIAL_REL_WITHIN}"/>
	</fx:Declarations>
	
		<fx:Style>
		@namespace ns "http://www.esri.com/2008/ags";
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace TGISViewer "cn.seisys.TGISViewer.*";
		@namespace esri "http://www.esri.com/2008/ags";
		mx|Tree {
			folderClosedIcon: ClassReference(null);
			folderOpenIcon: ClassReference(null);
			defaultLeafIcon: ClassReference(null);
		}
	</fx:Style>
	
	<viewer:states>
		<s:State name="graphicalInput"/>
		<s:State name="textInput"/>
	</viewer:states>
	
	<viewer:transitions>
		<s:Transition autoReverse="true" toState="*">
			<s:Fade id="fade"/>
		</s:Transition>
	</viewer:transitions>
	
	<viewer:WidgetTemplate id="wTemplate" enableCloseButton="false"
						   width="300" height="400">
		<viewer:layout>
			<s:VerticalLayout gap="0"/>
		</viewer:layout>
		
		<s:Group id="grpInput" width="100%">
			<s:Group id="graphicInput" width="100%" height="80" 
					 visible="false" visible.graphicalInput="true">
				<s:layout>
					<s:VerticalLayout gap="0" 
									  paddingTop="5" paddingBottom="5" 
									  paddingLeft="5" paddingRight="5"/>
				</s:layout>
				
				<s:HGroup id="imageGroup" width="100%" height="50" gap="10" 
						  horizontalAlign="center" verticalAlign="middle">
					<s:Image name="{DrawTool.MAPPOINT}" toolTip="点"
							 source="assets/images/i_draw_point.png"
							 useHandCursor="true" buttonMode="true"
							 rollOut="iconRollOutHandler(event)"
							 rollOver="iconRollOverHandler(event)"
							 click="activateDrawTool(event)"/>
					<s:Image name="{DrawTool.POLYLINE}" toolTip="折线"
							 source="assets/images/i_draw_line.png"
							 useHandCursor="true" buttonMode="true"
							 rollOut="iconRollOutHandler(event)"
							 rollOver="iconRollOverHandler(event)"
							 click="activateDrawTool(event)"/>
					<s:Image name="{DrawTool.EXTENT}" toolTip="矩形"
							 source="assets/images/i_draw_rect.png" 
							 useHandCursor="true" buttonMode="true"
							 rollOut="iconRollOutHandler(event)"
							 rollOver="iconRollOverHandler(event)"
							 click="activateDrawTool(event)"/>
					<s:Image name="{DrawTool.POLYGON}" toolTip="多边形"
							 source="assets/images/i_draw_poly.png" 
							 useHandCursor="true" buttonMode="true"
							 rollOut="iconRollOutHandler(event)"
							 rollOver="iconRollOverHandler(event)"
							 click="activateDrawTool(event)"/>
					<s:Image id="imgClear" toolTip="清除"
							 source="assets/images/i_clear.png" 
							 useHandCursor="true" buttonMode="true"
							 rollOut="iconRollOutHandler(event)"
							 rollOver="iconRollOverHandler(event)"
							 click="imageClear_clickHandler(event)"/>
				</s:HGroup>
				
				<s:HGroup width="100%" height="30" 
						  horizontalAlign="center" verticalAlign="middle">
					<s:Label text="缓冲距离: "/>
					<s:RadioButton id="rdbtnBufferDistance0" label="无" 
								   selected="true"
								   group="{rdgrpBufferDistance}" 
								   value="0"/>
					<s:RadioButton id="rdbtnBufferDistance50" label="50米" 
								   group="{rdgrpBufferDistance}" 
								   value="50"/>
					<s:RadioButton id="rdbtnBufferDistance500" label="500米"
								   group="{rdgrpBufferDistance}" 
								   value="500"/>
					<s:RadioButton id="rdbtnBufferDistance1000" label="1000米"
								   group="{rdgrpBufferDistance}" 
								   value="1000"/>
				</s:HGroup>
			</s:Group>
			
			<s:Group id="textInput"
					 width="100%" height="50"
					 visible="false"
					 visible.textInput="true">
				<s:layout>
					<s:VerticalLayout gap="2" paddingTop="10" paddingLeft="10" 
									  paddingRight="10" paddingBottom="5"/>
				</s:layout>
				
				<s:HGroup width="100%" height="30" verticalAlign="middle">
					<s:Label text="关键字: "/>
					<s:TextInput id="txtKeyWord" width="100%"
								 keyDown="txtKeyWord_keyDownHandler(event)"/>
					<s:Button id="btnFind" label="搜索" width="50"
							  click="btnFind_clickHandler(event)"/>
					<s:Button id="btnClear" label="清除" width="50" 
							  click="btnClear_clickHandler(event)"/>
				</s:HGroup>
			</s:Group>
		</s:Group>
		
		<s:Group id="resultList" width="100%" height="100%">
			<!--<s:layout>
				<s:VerticalLayout gap="2" 
								  paddingTop="10" paddingBottom="5" 
								  paddingLeft="10" paddingRight="10"/>
			</s:layout>-->
			
			<checkTree:CheckTree id="trResult" width="100%" height="100%" 
								 borderAlpha="0" 
								 labelField="label" checkBoxStateField="state" 
								 checkBoxEnableState="true" 
								 dataProvider="{_treeDataSource}"
								 change="trResult_changeHandler(event)" 
								 doubleClick="trResult_doubleClickHandler(event)"/>
		</s:Group>
	</viewer:WidgetTemplate>
</viewer:BaseWidget>
