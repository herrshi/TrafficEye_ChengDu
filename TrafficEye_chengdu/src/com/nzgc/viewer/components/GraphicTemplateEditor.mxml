<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:nzgcComponents="com.nzgc.viewer.components.*"
			   width="400"
			   height="500"
			   height.TextTemplate="530"
			   height.SimpleMarkerTemplate="450"
			   height.PolygonTemplate="425"
			   height.PolylineTemplate="340"
			   title="模板编辑"
			   creationComplete="titlewindow1_creationCompleteHandler(event)"
			   skinClass="com.nzgc.viewer.skins.ViewerTitleWindowSkin"
			   currentState="SimpleMarkerTemplate">
	
	<!-- Add events for calling applications to bind to. -->
	<fx:Metadata>
		[Event(name="graphicTemplateEditor_Save", type="flash.events.Event")]
		[Event(name="graphicTemplateEditor_SaveNew", type="flash.events.Event")]
		[Event(name="graphicTemplateEditor_Cancel", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.symbols.Symbol;
			import com.esri.ags.symbols.TextSymbol;
			import com.esri.ags.tools.DrawTool;
			import com.nzgc.viewer.components.supportClasses.GraphicTemplate;
			import com.nzgc.viewer.components.supportClasses.GraphicTemplateGroup;
			import com.nzgc.viewer.skins.ViewerTitleWindowSkin;
			import com.nzgc.viewer.utils.GraphicUtil;
			import com.nzgc.viewer.utils.SymbolUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.core.IVisualElement;
			import mx.events.CloseEvent;
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import spark.events.IndexChangeEvent;

			
			
			/* -------------------------------------------------------------------
			Component constants
			---------------------------------------------------------------------- */
			
			public static const SIMPLE_MARKER_TEMPLATE:String = "Simple Marker Template";
			public static const POLYGON_TEMPLATE:String = "Polygon Template";
			public static const POLYLINE_TEMPLATE:String = "Polyline Template";
			public static const TEXT_TEMPLATE:String = "Text Template";
			

			
			/* -------------------------------------------------------------------
			Component variables
			---------------------------------------------------------------------- */

			[Bindable]
			private var _template:GraphicTemplate;
			
			[Bindable]
			private var _newTemplate:GraphicTemplate;
			
			[Bindable]
			private var _templateGroups:Array = [];
			
			// Drawing tool drop list data provider
			private var _arrayList:ArrayList;
			
			
			
			/* -------------------------------------------------------------------
			Component properties
			---------------------------------------------------------------------- */
			
			/**
			 * Sets the default template to be modified
			 */ 
			public function set Template(value:GraphicTemplate):void
			{
				_template = value;
				
				_newTemplate = new GraphicTemplate();
				if (value)
				{
					// Set the template type dropdown
					updateTemplateType(value);

					// Set the template details
					_newTemplate.name = value.name;
					_newTemplate.description = value.description;
					_newTemplate.drawingTool = value.drawingTool;
					_newTemplate.groupname = value.groupname;

					_newTemplate.prototype = GraphicUtil.CopyGraphic(value.prototype);
					symbolEditor.symbol = _newTemplate.prototype.symbol;
					
					// Update the name/description text
					txtTemplateName.text = value.name;
					//txtTemplateGroupName.text = value.groupname;
					cboTemplateGroupName.selectedItem = value.groupname;
					txtTemplateDescription.text = value.description;
					
					// Set the default state
					updateCurrentState(value.CreateGeometryType);
				}
				else
				{
					_newTemplate = generateDefaultTemplate(SIMPLE_MARKER_TEMPLATE);
					symbolEditor.symbol = _newTemplate.prototype.symbol;
					currentState = "SimpleMarkerTemplate";
				}
			}
			
			public function get Template():GraphicTemplate
			{
				return _template;
			}
			
			public function get NewTemplate():GraphicTemplate
			{
				return _newTemplate;
			}

			/**
			 * Template groups
			 */
			public function set TemplateGroups(value:Array):void
			{
				if (value)
				{
					_templateGroups = value;
					
					var templateList:ArrayList = new ArrayList();
					for each (var grp:GraphicTemplateGroup in _templateGroups)
					{
						templateList.addItem(grp.name);
					}
					cboTemplateGroupName.dataProvider = templateList;
				}
				else
				{
					_templateGroups = [];
				}
			}
			
			public function get TemplateGroups():Array
			{
				return _templateGroups;
			}
			
			/**
			 * 
			 */
			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void
			{
				// Update the default settings
				if (!_template)
				{
					_newTemplate = generateDefaultTemplate(SIMPLE_MARKER_TEMPLATE);
					symbolEditor.symbol = _newTemplate.prototype.symbol;
				}
			}
			
			/**
			 * Creates a basic template based on the supplied template type.
			 */
			private function generateDefaultTemplate(templateType:String):GraphicTemplate
			{
				var template:GraphicTemplate = new GraphicTemplate();
				template.name = "New Template";
				template.description = "";
				
				
				if (_templateGroups.length > 0)
				{
					var group:GraphicTemplateGroup = _templateGroups[0] as GraphicTemplateGroup;
					template.groupname = group.name;
				}
				else
				{
					template.groupname = "My Templates";
				}
				
				_arrayList = new ArrayList();
				
				switch(templateType)
				{
					case SIMPLE_MARKER_TEMPLATE:
					{
						template.prototype = new Graphic(null,new SimpleMarkerSymbol("circle",15,0xFF0000,1,0,0,0,
							new SimpleLineSymbol("solid",0xFFFFFF,1,1)),{}); 
						template.drawingTool = DrawTool.MAPPOINT;
						
						_arrayList.addItem(mapPointIcon);
						drawDropDownList.dataProvider = _arrayList;
						
						break;
					}
						
					case POLYLINE_TEMPLATE:
					{
						template.prototype = new Graphic(null,new SimpleLineSymbol("solid",0xFF0000,1,1),{}); 
						template.drawingTool = DrawTool.POLYLINE;
						
						_arrayList.addItem(pointToPointLineIcon);
						_arrayList.addItem(freehandLineIcon);
						_arrayList.addItem(lineIcon);
						drawDropDownList.dataProvider = _arrayList;
						break;	
					}
						
					case POLYGON_TEMPLATE:
					{
						template.prototype = new Graphic(null,new SimpleFillSymbol("solid",0xFF0000,0.5,
							new SimpleLineSymbol("solid",0x000000,1,1)),{}); 
						template.drawingTool = DrawTool.POLYGON;
						
						_arrayList.addItem(pointToPointPolygonIcon);
						_arrayList.addItem(freehandPolygonIcon);
						_arrayList.addItem(extentIcon);
						_arrayList.addItem(autoCompleteIcon);
						_arrayList.addItem(circleIcon);
						_arrayList.addItem(ellipseIcon);
						drawDropDownList.dataProvider = _arrayList;
						break;
					}
						
					case TEXT_TEMPLATE:
					{
						var ts:TextSymbol = new TextSymbol("Text",null,0x000000,false,0,false,0xFFFFFF,"middle",0,0,0);
						var tf:TextFormat = new TextFormat("Arial",14,0x000000,false,false,false);
						ts.textFormat = tf;
						ts.alpha = 1;
						
						template.prototype = new Graphic(null,ts,{}); 
						template.drawingTool = DrawTool.MAPPOINT;
						
						_arrayList.addItem(textIcon);
						drawDropDownList.dataProvider = _arrayList;
						break;
					}
				}
				
				drawDropDownList.selectedIndex = -1;
				drawDropDownList.selectedIndex = 0;

				return template;
			}
			
			/**
			 * 
			 */
			protected function cboTemplateType_changeHandler(event:IndexChangeEvent):void
			{
				// Generate a new template based on this geometry type
				_newTemplate = generateDefaultTemplate(cboTemplateType.selectedItem);

				// Update the symbol editor
				symbolEditor.symbol = _newTemplate.prototype.symbol;
				
				// Set the default state
				updateCurrentState(_newTemplate.CreateGeometryType);
			}
			
			/**
			 * 
			 */
			private function updateTemplateType(graphicTemplate:GraphicTemplate):void
			{
				// Reset the drawing tool list
				_arrayList = new ArrayList();
				
				switch(graphicTemplate.CreateGeometryType)
				{
					case Geometry.MAPPOINT:
					{
						// Check the symbol type
						if (graphicTemplate.prototype.symbol is TextSymbol)
						{
							cboTemplateType.selectedIndex = 3;
							
							// Set the drawing tools
							_arrayList.addItem(textIcon);
							drawDropDownList.dataProvider = _arrayList;
						}
						else
						{
							cboTemplateType.selectedIndex = 0;
							
							// Set the drawing tools
							_arrayList.addItem(mapPointIcon);
							drawDropDownList.dataProvider = _arrayList;
						}
						
						break;
					}

					case Geometry.POLYLINE:
					{
						cboTemplateType.selectedIndex = 2;

						// Set the drawing tools
						_arrayList.addItem(pointToPointLineIcon);
						_arrayList.addItem(freehandLineIcon);
						_arrayList.addItem(lineIcon);
						drawDropDownList.dataProvider = _arrayList;
						break;
					}

					case Geometry.POLYGON:
					{
						cboTemplateType.selectedIndex = 1;
						
						// Set the drawing tools
						_arrayList.addItem(pointToPointPolygonIcon);
						_arrayList.addItem(freehandPolygonIcon);
						_arrayList.addItem(extentIcon);
						_arrayList.addItem(autoCompleteIcon);
						_arrayList.addItem(circleIcon);
						_arrayList.addItem(ellipseIcon);
						drawDropDownList.dataProvider = _arrayList;
						break;
					}
				}

				var index:int = -1;
				
				for (var i:int = 0; i < drawDropDownList.dataProvider.length; i++)
				{
					if (drawDropDownList.dataProvider.getItemAt(i).drawId == graphicTemplate.drawingTool)
					{
						index = i;
						break;
					}
				}
				
				drawDropDownList.selectedIndex = index;
			}
			
			private function updateCurrentState(geometryType:String):void
			{
				switch (geometryType)
				{
					case Geometry.MAPPOINT:
					{
						if (_newTemplate.prototype.symbol is TextSymbol)
						{
							currentState = "TextTemplate";							
						}
						else
						{
							currentState = "SimpleMarkerTemplate";							
						}
						break;
					}
						
					case Geometry.POLYGON:
					{
						currentState = "PolygonTemplate";							
						break;
					}
						
					case Geometry.POLYLINE:
					{
						currentState = "PolylineTemplate";							
						break;
					}
				}
			}
			
			/** 
			 * Called when the Apply button is clicked
			 */
			protected function butOK_clickHandler(event:MouseEvent):void
			{
				// Update the template
				updateNewTemplate();
				
				if (_template)
				{
					// Update the existing template details 
					_template.name = _newTemplate.name;
					_template.description = _newTemplate.description;
					_template.drawingTool = _newTemplate.drawingTool;
					_template.groupname = _newTemplate.groupname;
					_template.prototype.symbol = SymbolUtil.DuplicateSymbol(_newTemplate.prototype.symbol);
				}

				// Raise the save event - calling application will take care of updating the template. 
				dispatchEvent(new Event("graphicTemplateEditor_Save"));					
			}

			/** 
			 * Called when the Cancel button is clicked
			 */
			protected function butCancel_clickHandler(event:MouseEvent):void
			{
				// Dispatch the Cancel event
				dispatchEvent(new Event("graphicTemplateEditor_Cancel"));	
			}

			/** 
			 * Called when the Save As button is clicked
			 */
			protected function butSaveAs_clickHandler(event:MouseEvent):void
			{
				// Update the template
				updateNewTemplate();
				
				// Dispatch the Save New event
				dispatchEvent(new Event("graphicTemplateEditor_SaveNew"));	
			}

			/** 
			 * Called to update the settings of the new template
			 */
			private function updateNewTemplate():void
			{
				_newTemplate.name = txtTemplateName.text;
				_newTemplate.description = txtTemplateDescription.text;
				_newTemplate.groupname = cboTemplateGroupName.selectedItem;
				_newTemplate.drawingTool = drawDropDownList.selectedItem.drawId;
				_newTemplate.prototype.symbol = symbolEditor.NewSymbol;
			} 
			
			/**
			 * Called when the user types a value in the template group dialog
			 */
			protected function cboTemplateGroupName_changeHandler(event:IndexChangeEvent):void
			{
				// Determine if the index specifies a new data item.
				if(cboTemplateGroupName.selectedIndex == spark.components.ComboBox.CUSTOM_SELECTED_ITEM)
				{
					var newGroupName:String = cboTemplateGroupName.selectedItem;
					
					// Add the new item to the data provider.
					cboTemplateGroupName.dataProvider.addItem(newGroupName);

					// Reset as the selected item
					cboTemplateGroupName.selectedIndex = cboTemplateGroupName.dataProvider.getItemIndex(newGroupName);
				}
			}

		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="SimpleMarkerTemplate" />
		<s:State name="PolygonTemplate" />
		<s:State name="PolylineTemplate" />
		<s:State name="TextTemplate" />
	</s:states>
	
	<fx:Declarations>
		<!--- @private -->
		<fx:Object id="mapPointIcon"
				   drawId="mappoint"
				   icon="@Embed('/assets/skins/ElementMarker16.png')"
				   label="{resourceManager.getString('ESRIMessages', 'editorCreatePointLabel')}"/>
		
		<!-- Icons for polyline drawing -->
		<!--- @private -->
		<fx:Object id="pointToPointLineIcon"
				   drawId="pointToPointLine"
				   icon="@Embed('/assets/skins/ElementPolyline16.png')"
				   label="{resourceManager.getString('ESRIMessages', 'editorCreatePointToPointLabel')}"/>
		<!--- @private -->
		<fx:Object id="freehandLineIcon"
				   drawId="freehandLine"
				   icon="@Embed('/assets/skins/ElementFreehand16.png')"
				   label="{resourceManager.getString('ESRIMessages', 'editorCreateFreehandLabel')}"/>
		<!--- @private -->
		<fx:Object id="lineIcon"
				   drawId="line"
				   icon="@Embed('/assets/skins/ElementLine16.png')"
				   label="{resourceManager.getString('ESRIMessages', 'editorCreateLineLabel')}"/>
		
		<!-- Icons for polygon drawing -->
		<!--- @private -->
		<fx:Object id="pointToPointPolygonIcon"
				   drawId="pointToPointPolygon"
				   icon="@Embed('/assets/skins/EditingPolygonTool16.png')"
				   label="{resourceManager.getString('ESRIMessages', 'editorCreatePointToPointLabel')}"/>
		<!--- @private -->
		<fx:Object id="freehandPolygonIcon"
				   drawId="freehandPolygon"
				   icon="@Embed('/assets/skins/FreehandPolygon_16.png')"
				   label="{resourceManager.getString('ESRIMessages', 'editorCreateFreehandLabel')}"/>
		<!--- @private -->
		<fx:Object id="extentIcon"
				   drawId="extent"
				   icon="@Embed('/assets/skins/EditingExtent_16.png')"
				   label="{resourceManager.getString('ESRIMessages', 'editorCreateExtentLabel')}"/>
		
		<!--- @private -->
		<fx:Object id="circleIcon"
				   drawId="circle"
				   icon="@Embed('/assets/skins/EditingCircleTool16.png')"
				   label="{resourceManager.getString('ESRIMessages', 'editorCreateCircleLabel')}"/>
		
		<!--- @private -->
		<fx:Object id="ellipseIcon"
				   drawId="ellipse"
				   icon="@Embed('/assets/skins/EditingEllipseTool16.png')"
				   label="{resourceManager.getString('ESRIMessages', 'editorCreateEllipseLabel')}"/>
		
		<!--- @private -->
		<fx:Object id="autoCompleteIcon"
				   drawId="autoComplete"
				   icon="@Embed('/assets/skins/EditingAutoCompletePolygonTool16.png')"
				   label="{resourceManager.getString('ESRIMessages', 'editorCreateAutoCompleteLabel')}"/>	

		<!--- @private -->
		<fx:Object id="textIcon"
				   drawId="text"
				   icon="@Embed('/assets/skins/ElementText16.png')"
				   label="{'Place Text'}"/>	
		
		<mx:StringValidator id="templateNameValidator" required="true" source="{txtTemplateName}" 
							minLength="3" property="text" triggerEvent="change"/>
		<!--<mx:StringValidator id="templateGroupNameValidator" required="true" source="txtTemplateGroupName" minLength="3" />-->
	</fx:Declarations>
	
	<s:VGroup width="100%" height="100%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" >
		
		<!--- Group where use determines the type of template they wish to create -->	
		<s:HGroup id="templateTypeGroup" width="100%" verticalAlign="middle" gap="5">
			<s:Label id="labTemplateType" text="选择模板类型:" />
			<s:DropDownList id="cboTemplateType" width="100%" change="cboTemplateType_changeHandler(event)"
							dataProvider="{new ArrayCollection([SIMPLE_MARKER_TEMPLATE,POLYGON_TEMPLATE,POLYLINE_TEMPLATE,TEXT_TEMPLATE])}" 
							selectedIndex="0" />
		</s:HGroup>	
		
		<nzgcComponents:SymbolEditor id="symbolEditor" width="100%"/>
		
		<s:Label id="labTemplateSettings" text="模板设置" styleName="WidgetTitle" width="100%" />

		<s:HGroup id="templateNameSettingsGroup" width="100%" verticalAlign="middle" gap="5">
			<s:Label id="labTemplateName" text="名称" />
			<s:TextInput id="txtTemplateName" width="100%" toolTip="输入该模板名称"  />
			<s:Label id="labTemplateGroupName" text="分组类型" />
			<!--<s:TextInput id="txtTemplateGroupName" width="100%" toolTip="Enter the name of the group to put this template in" />-->
		
			<s:ComboBox id="cboTemplateGroupName" width="100%" change="cboTemplateGroupName_changeHandler(event)"
						toolTip="选择一个现有的模板分组或输入一个新的分组名称，作为该模版分组类" />
		</s:HGroup>
		
		<s:VGroup id="templateDescriptionGroup" width="100%" >
			<s:Label id="labTemplateDescription" text="模板描述" />
			<s:TextInput id="txtTemplateDescription" width="100%" toolTip="进入一个简短的描述该模板"  />
		</s:VGroup>
		
		<s:HGroup id="templateToolSettingsGroup" width="100%" verticalAlign="middle" gap="5">
			<s:Label id="labDrawTool" text="默认画工具" /> 
			<s:DropDownList id="drawDropDownList"
							width="40" height="25"
							itemRenderer="com.esri.ags.skins.supportClasses.EditorDropDownListItemRenderer"
							skinClass="com.esri.ags.skins.EditorDrawDropDownListSkin"
							toolTip="{resourceManager.getString('ESRIMessages', 'editorCreateOptionsTooltip')}" />
		</s:HGroup>
			
		<s:HGroup id="templateActionGroup" width="100%" horizontalAlign="center" gap="5" verticalAlign="middle" >
			<s:Button id="butOK" label="Apply" toolTip="点击更新选定的模板特性" 
					  click="butOK_clickHandler(event)" visible="{_template != null}" includeInLayout="{_template != null}" 
					  enabled="{txtTemplateName.text.length &gt; 0}" />
			<s:Button id="butSaveAs" label="另存为" toolTip="点击创建一个新的模板基于这些特性" 
					  click="butSaveAs_clickHandler(event)" 
					  enabled="{txtTemplateName.text.length &gt; 0}" />
			<s:Button id="butCancel" label="关闭" toolTip="点击取消并退出模板编辑" 
					  click="butCancel_clickHandler(event)" />
		</s:HGroup>

	</s:VGroup>
	
</s:TitleWindow>
